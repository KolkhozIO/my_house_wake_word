#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
sys.path.append(os.path.join(os.path.dirname(__file__), 'microwakeword'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.utils.path_manager import paths

def generate_negative_spectrograms():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from microwakeword.audio.clips import Clips
        from microwakeword.audio.augmentation import Augmentation
        from microwakeword.audio.spectrograms import SpectrogramGeneration
        from microwakeword.data import RaggedMmap
        
        # –ü—É—Ç—å –∫ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        negatives_dir = paths.NEGATIVES_PROCESSED
        
        if not os.path.exists(negatives_dir):
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {negatives_dir}")
            return False
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        neg_files = len([f for f in os.listdir(negatives_dir) if f.endswith('.wav')])
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {neg_files} –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(os.path.join(paths.FEATURES_NEGATIVES, "training"), exist_ok=True)
        os.makedirs(os.path.join(paths.FEATURES_NEGATIVES, "validation"), exist_ok=True)
        os.makedirs(os.path.join(paths.FEATURES_NEGATIVES, "testing"), exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        negatives_clips = Clips(
            input_directory=negatives_dir,
            file_pattern='*.wav',
            max_clip_duration_s=1.5,
            remove_silence=False,
            random_split_seed=10,
            split_count=0.1,  # 10% –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é/—Ç–µ—Å—Ç
        )
        
        # –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        negatives_augmentation = Augmentation(
            augmentation_duration_s=1.5,
            augmentation_probabilities={
                "SevenBandParametricEQ": 0.1,
                "TanhDistortion": 0.1,
                "PitchShift": 0.1,
                "BandStopFilter": 0.1,
                "AddColorNoise": 0.1,
                "Gain": 1.0,
            },
            min_jitter_s=0.195,
            max_jitter_s=0.205,
        )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        negatives_spectrograms = SpectrogramGeneration(
            clips=negatives_clips,
            augmenter=negatives_augmentation,
            slide_frames=1,
            step_ms=4.42,
        )
        
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...")
        RaggedMmap.from_generator(
            out_dir=os.path.join(paths.FEATURES_NEGATIVES, "training", "wakeword_mmap"),
            sample_generator=negatives_spectrograms.spectrogram_generator(split="train", repeat=1),
            batch_size=1000,
            verbose=True,
        )
        
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        RaggedMmap.from_generator(
            out_dir=os.path.join(paths.FEATURES_NEGATIVES, "validation", "wakeword_mmap"),
            sample_generator=negatives_spectrograms.spectrogram_generator(split="validation", repeat=1),
            batch_size=1000,
            verbose=True,
        )
        
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        RaggedMmap.from_generator(
            out_dir=os.path.join(paths.FEATURES_NEGATIVES, "testing", "wakeword_mmap"),
            sample_generator=negatives_spectrograms.spectrogram_generator(split="test", repeat=1),
            batch_size=1000,
            verbose=True,
        )
        
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("="*50)
    
    if generate_negative_spectrograms():
        print("\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üìÅ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:")
        print(f"  - {paths.FEATURES_NEGATIVES}/")
        return True
    else:
        print("\n‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        return False

if __name__ == "__main__":
    main()