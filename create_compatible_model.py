#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–π —Å TFLite Micro
"""

import tensorflow as tf
import numpy as np
import os

def create_compatible_model():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–¥–µ–ª—å —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å TFLite Micro"""
    
    # –ü—Ä–æ—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    model = tf.keras.Sequential([
        tf.keras.layers.Input(shape=(40, 49)),
        tf.keras.layers.Reshape((40, 49, 1)),
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–∏ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        tf.keras.layers.Conv2D(8, (3, 3), activation='relu'),
        tf.keras.layers.MaxPooling2D((2, 2)),
        
        tf.keras.layers.Conv2D(16, (3, 3), activation='relu'),
        tf.keras.layers.MaxPooling2D((2, 2)),
        
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(16, activation='relu'),
        tf.keras.layers.Dense(1, activation='sigmoid')
    ])
    
    model.compile(
        optimizer='adam',
        loss='binary_crossentropy',
        metrics=['accuracy']
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
    dummy_data = np.random.random((10, 40, 49))
    dummy_labels = np.random.randint(0, 2, (10, 1))
    
    # –û–±—É—á–∞–µ–º –Ω–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (1 —ç–ø–æ—Ö–∞)
    model.fit(dummy_data, dummy_labels, epochs=1, verbose=0)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
    model_dir = "models/trained_model"
    os.makedirs(model_dir, exist_ok=True)
    
    # H5 –º–æ–¥–µ–ª—å
    model_path = os.path.join(model_dir, "wake_word_model.h5")
    model.save(model_path)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ TFLite —Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
    converter = tf.lite.TFLiteConverter.from_keras_model(model)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å TFLite Micro
    converter.target_spec.supported_ops = [
        tf.lite.OpsSet.TFLITE_BUILTINS,
        tf.lite.OpsSet.SELECT_TF_OPS
    ]
    
    try:
        tflite_model = converter.convert()
        
        tflite_path = os.path.join(model_dir, "wake_word_model.tflite")
        with open(tflite_path, 'wb') as f:
            f.write(tflite_model)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        size_kb = os.path.getsize(tflite_path) / 1024
        
        print(f"‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–∞—è –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {tflite_path}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {size_kb:.1f} KB")
        
        return size_kb
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return None

if __name__ == "__main__":
    create_compatible_model()