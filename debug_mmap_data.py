#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö RaggedMmap
"""

import sys
import os
sys.path.append('/home/microWakeWord')

import numpy as np
from pathlib import Path

def debug_mmap_data():
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ RaggedMmap"""
    
    print("üîç –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö RaggedMmap")
    print("=" * 40)
    
    # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    positives_dir = "/home/microWakeWord_data/features_positives/training/wakeword_mmap"
    print(f"üìÅ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {positives_dir}")
    
    try:
        from microwakeword.data import RaggedMmap
        
        data = RaggedMmap(positives_dir)
        print(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(data)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—Ä–∞–∑—Ü–æ–≤
        for i in range(min(5, len(data))):
            spec = data[i]
            print(f"  –û–±—Ä–∞–∑–µ—Ü {i}: —Ñ–æ—Ä–º–∞ = {spec.shape}, —Ç–∏–ø = {type(spec)}")
            if hasattr(spec, 'shape'):
                print(f"    –î–µ—Ç–∞–ª–∏ —Ñ–æ—Ä–º—ã: {spec.shape}")
            else:
                print(f"    –≠—Ç–æ –Ω–µ –º–∞—Å—Å–∏–≤: {spec}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –æ–±—Ä–∞–∑—Ü—ã
        import random
        indices = random.sample(range(len(data)), min(10, len(data)))
        print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤: {indices}")
        
        valid_count = 0
        for idx in indices:
            spec = data[idx]
            if hasattr(spec, 'shape') and spec.shape == (194, 40):
                valid_count += 1
            else:
                print(f"  –û–±—Ä–∞–∑–µ—Ü {idx}: —Ñ–æ—Ä–º–∞ = {spec.shape if hasattr(spec, 'shape') else '–Ω–µ –º–∞—Å—Å–∏–≤'}")
        
        print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤: {valid_count}/{len(indices)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_mmap_data()