#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ TFLite –º–æ–¥–µ–ª–∏ –∏–∑ –æ–±—É—á–µ–Ω–Ω—ã—Ö –≤–µ—Å–æ–≤
–û–±—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –≥–æ—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è ESPHome
"""

import os
import sys
import json
import logging
import numpy as np
import tensorflow as tf

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
sys.path.insert(0, '/home/microWakeWord/backups/mww_orig')

from microwakeword import mixednet
from microwakeword.layers import modes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_tflite_from_weights():
    """–°–æ–∑–¥–∞–µ—Ç TFLite –º–æ–¥–µ–ª—å –∏–∑ –æ–±—É—á–µ–Ω–Ω—ã—Ö –≤–µ—Å–æ–≤"""
    
    # –ü—É—Ç—å –∫ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    model_dir = "/home/microWakeWord_data/models/historical/trained_models/limited_model_36529"
    weights_path = os.path.join(model_dir, "last_weights.weights.h5")
    
    if not os.path.exists(weights_path):
        logger.error(f"‚ùå –§–∞–π–ª –≤–µ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {weights_path}")
        return False
    
    logger.info(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞ –∏–∑: {weights_path}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏
        config = {
            "spectrogram_length_final_layer": 272,
            "batch_size": 16,
            "learning_rate": 0.001,
            "training_steps": 100,
            "validation_steps": 10,
            "features_dir": "/home/microWakeWord_data/limited_features",
            "features_dir_negatives": "/home/microWakeWord_data/limited_features_negatives",
            "train_dir": model_dir,
            "summaries_dir": os.path.join(model_dir, "logs/"),
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è spectrogram_length
        class Flags:
            def __init__(self):
                self.pointwise_filters = '48, 48, 48, 48'
                self.depthwise_filters = '48, 48, 48, 48'
                self.residual_connection = '0,0,0,0'
                self.strides = '1,1,1,1'
                self.dilation_rate = '1,1,1,1'
                self.kernel_size = '3,3,3,3'
                self.pool_size = '2,2,2,2'
                self.dropout_rate = 0.1
                self.activation = 'relu'
                self.use_batch_norm = True
                self.use_separable_conv = True
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¢–û–ß–ù–û –ö–ê–ö –í –û–ë–£–ß–ï–ù–ò–ò
                self.first_conv_filters = 32
                self.first_conv_kernel_size = 3
                self.repeat_in_block = '1, 1, 1, 1'
                self.mixconv_kernel_sizes = '[5], [9], [13], [21]'
                self.stride = 1
                self.spatial_attention = 0
                self.pooled = 0
        
        flags = Flags()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–ß–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ training_config.yaml
        config["spectrogram_length"] = 272
        config["spectrogram_length_final_layer"] = 226
        config["mode"] = modes.Modes.TRAINING
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ –¢–ê–ö –ñ–ï –ö–ê–ö –í –û–ë–£–ß–ï–ù–ò–ò
        input_shape = modes.get_input_data_shape(config, modes.Modes.TRAINING)
        config["training_input_shape"] = input_shape
        
        logger.info(f"üìä Spectrogram length: {config['spectrogram_length']}")
        logger.info(f"üìä Input shape: {input_shape}")
        
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
        logger.info("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        model = mixednet.model(flags, shape=input_shape, batch_size=config['batch_size'])
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞
        logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Å–æ–≤...")
        model.load_weights(weights_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ SavedModel —Ñ–æ—Ä–º–∞—Ç–µ —Å–Ω–∞—á–∞–ª–∞
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ SavedModel...")
        saved_model_path = "/home/microWakeWord_data/original_library_model_saved"
        model.export(saved_model_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ SavedModel –≤ TFLite
        logger.info("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ TFLite –∏–∑ SavedModel...")
        converter = tf.lite.TFLiteConverter.from_saved_model(saved_model_path)
        converter.optimizations = [tf.lite.Optimize.DEFAULT]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ TFLite
        tflite_model = converter.convert()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º TFLite –º–æ–¥–µ–ª—å
        tflite_path = os.path.join(model_dir, "model.tflite")
        with open(tflite_path, 'wb') as f:
            f.write(tflite_model)
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç –¥–ª—è ESPHome
        manifest = {
            "version": 2,
            "type": "micro",
            "model": "model.tflite",
            "input_shape": input_shape,
            "spectrogram_length": config["spectrogram_length"],
            "wake_word": "–º–∏–ª—ã–π –¥–æ–º",
            "description": "–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (TTS + —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ)"
        }
        
        manifest_path = os.path.join(model_dir, "model.json")
        with open(manifest_path, 'w') as f:
            json.dump(manifest, f, indent=2)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        main_tflite_path = "/home/microWakeWord_data/limited_model.tflite"
        main_manifest_path = "/home/microWakeWord_data/limited_model.json"
        
        import shutil
        shutil.copy2(tflite_path, main_tflite_path)
        shutil.copy2(manifest_path, main_manifest_path)
        
        logger.info(f"‚úÖ TFLite –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {tflite_path}")
        logger.info(f"‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: {manifest_path}")
        logger.info(f"‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {main_tflite_path}")
        logger.info(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–Ω–∏—Ñ–µ—Å—Ç: {main_manifest_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏
        model_size = os.path.getsize(tflite_path) / 1024  # KB
        logger.info(f"üìä –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {model_size:.1f} KB")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TFLite –º–æ–¥–µ–ª–∏: {e}")
        import traceback
        logger.error(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üéØ –°–û–ó–î–ê–ù–ò–ï TFLITE –ú–û–î–ï–õ–ò –ò–ó –û–ë–£–ß–ï–ù–ù–´–• –í–ï–°–û–í")
    
    success = create_tflite_from_weights()
    
    if success:
        logger.info("üéâ TFLite –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üìÅ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ ESPHome")
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å TFLite –º–æ–¥–µ–ª—å")
        sys.exit(1)

if __name__ == "__main__":
    main()