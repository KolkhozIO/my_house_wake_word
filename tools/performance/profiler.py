#!/usr/bin/env python3
"""
–ü—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è microWakeWord
"""

import time
import psutil
import threading
import json
import yaml
from pathlib import Path
from typing import Dict, List, Any, Optional, Callable
from datetime import datetime, timedelta
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from contextlib import contextmanager
import functools


class PerformanceProfiler:
    """–ü—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è microWakeWord"""
    
    def __init__(self, config_path: str = "config/base/system.yaml"):
        self.config = self._load_config(config_path)
        self.metrics = {}
        self.active_profiles = {}
        self.monitoring_thread = None
        self.monitoring_active = False
        self.results_dir = Path("tools/performance/results")
        self.results_dir.mkdir(parents=True, exist_ok=True)
    
    def _load_config(self, config_path: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                return yaml.safe_load(f)
        except Exception:
            return self._get_default_config()
    
    def _get_default_config(self) -> Dict[str, Any]:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'system': {
                'performance': {
                    'monitoring_interval': 1,
                    'max_monitoring_duration': 3600,
                    'alert_thresholds': {
                        'cpu_usage': 80,
                        'memory_usage': 85,
                        'disk_usage': 90
                    }
                }
            }
        }
    
    @contextmanager
    def profile_function(self, function_name: str, **kwargs):
        """–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        start_time = time.time()
        start_memory = psutil.Process().memory_info().rss / 1024 / 1024  # MB
        
        try:
            yield
        finally:
            end_time = time.time()
            end_memory = psutil.Process().memory_info().rss / 1024 / 1024  # MB
            
            duration = end_time - start_time
            memory_delta = end_memory - start_memory
            
            self._record_metric(function_name, {
                'duration': duration,
                'memory_delta': memory_delta,
                'start_memory': start_memory,
                'end_memory': end_memory,
                'timestamp': datetime.now().isoformat(),
                **kwargs
            })
    
    def profile_pipeline_stage(self, stage_name: str, stage_function: Callable, *args, **kwargs):
        """–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        print(f"üîç –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞: {stage_name}")
        
        with self.profile_function(f"pipeline.{stage_name}"):
            result = stage_function(*args, **kwargs)
        
        return result
    
    def start_system_monitoring(self, duration: int = 300, interval: float = 1.0):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
        if self.monitoring_active:
            print("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω")
            return
        
        print(f"üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥...")
        
        self.monitoring_active = True
        self.monitoring_thread = threading.Thread(
            target=self._monitor_system,
            args=(duration, interval)
        )
        self.monitoring_thread.start()
    
    def stop_system_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
        if not self.monitoring_active:
            print("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
            return
        
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã...")
        self.monitoring_active = False
        
        if self.monitoring_thread:
            self.monitoring_thread.join()
    
    def _monitor_system(self, duration: int, interval: float):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        start_time = time.time()
        end_time = start_time + duration
        
        while self.monitoring_active and time.time() < end_time:
            timestamp = datetime.now()
            
            # –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
            cpu_percent = psutil.cpu_percent(interval=0.1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
            process = psutil.Process()
            process_memory = process.memory_info().rss / 1024 / 1024  # MB
            process_cpu = process.cpu_percent()
            
            # –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫
            self._record_metric("system.monitoring", {
                'timestamp': timestamp.isoformat(),
                'cpu_percent': cpu_percent,
                'memory_percent': memory.percent,
                'memory_used_gb': memory.used / 1024 / 1024 / 1024,
                'memory_available_gb': memory.available / 1024 / 1024 / 1024,
                'disk_percent': disk.percent,
                'disk_used_gb': disk.used / 1024 / 1024 / 1024,
                'disk_free_gb': disk.free / 1024 / 1024 / 1024,
                'process_memory_mb': process_memory,
                'process_cpu_percent': process_cpu
            })
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
            self._check_alerts(cpu_percent, memory.percent, disk.percent)
            
            time.sleep(interval)
        
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def _check_alerts(self, cpu_percent: float, memory_percent: float, disk_percent: float):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        thresholds = self.config['system']['performance']['alert_thresholds']
        
        alerts = []
        
        if cpu_percent > thresholds['cpu_usage']:
            alerts.append(f"–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent:.1f}%")
        
        if memory_percent > thresholds['memory_usage']:
            alerts.append(f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_percent:.1f}%")
        
        if disk_percent > thresholds['disk_usage']:
            alerts.append(f"–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {disk_percent:.1f}%")
        
        if alerts:
            for alert in alerts:
                print(f"üö® –ê–õ–ï–†–¢: {alert}")
                self._record_metric("system.alerts", {
                    'timestamp': datetime.now().isoformat(),
                    'alert': alert,
                    'cpu_percent': cpu_percent,
                    'memory_percent': memory_percent,
                    'disk_percent': disk_percent
                })
    
    def _record_metric(self, metric_name: str, data: Dict[str, Any]):
        """–ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫–∏"""
        if metric_name not in self.metrics:
            self.metrics[metric_name] = []
        
        self.metrics[metric_name].append(data)
    
    def analyze_performance(self, metric_name: str = None) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if metric_name:
            metrics_to_analyze = {metric_name: self.metrics.get(metric_name, [])}
        else:
            metrics_to_analyze = self.metrics
        
        analysis = {}
        
        for name, data in metrics_to_analyze.items():
            if not data:
                continue
            
            analysis[name] = self._analyze_metric_data(name, data)
        
        return analysis
    
    def _analyze_metric_data(self, metric_name: str, data: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫–∏"""
        if not data:
            return {'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        numeric_fields = {}
        for field in data[0].keys():
            if isinstance(data[0][field], (int, float)):
                values = [item[field] for item in data if field in item]
                if values:
                    numeric_fields[field] = values
        
        analysis = {
            'total_samples': len(data),
            'time_range': {
                'start': data[0].get('timestamp', 'unknown'),
                'end': data[-1].get('timestamp', 'unknown')
            }
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
        for field, values in numeric_fields.items():
            analysis[f'{field}_stats'] = {
                'mean': float(np.mean(values)),
                'std': float(np.std(values)),
                'min': float(np.min(values)),
                'max': float(np.max(values)),
                'median': float(np.median(values))
            }
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ—Ç—Ä–∏–∫
        if 'duration' in numeric_fields:
            analysis['performance_summary'] = self._analyze_duration_metrics(numeric_fields['duration'])
        
        if 'cpu_percent' in numeric_fields:
            analysis['system_summary'] = self._analyze_system_metrics(numeric_fields)
        
        return analysis
    
    def _analyze_duration_metrics(self, durations: List[float]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return {
            'total_time': sum(durations),
            'average_time': np.mean(durations),
            'fastest_execution': min(durations),
            'slowest_execution': max(durations),
            'executions_per_second': len(durations) / sum(durations) if sum(durations) > 0 else 0
        }
    
    def _analyze_system_metrics(self, metrics: Dict[str, List[float]]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        summary = {}
        
        if 'cpu_percent' in metrics:
            cpu_values = metrics['cpu_percent']
            summary['cpu'] = {
                'average_usage': np.mean(cpu_values),
                'peak_usage': np.max(cpu_values),
                'usage_stability': 1 - np.std(cpu_values) / np.mean(cpu_values) if np.mean(cpu_values) > 0 else 0
            }
        
        if 'memory_percent' in metrics:
            memory_values = metrics['memory_percent']
            summary['memory'] = {
                'average_usage': np.mean(memory_values),
                'peak_usage': np.max(memory_values),
                'usage_trend': 'increasing' if memory_values[-1] > memory_values[0] else 'decreasing'
            }
        
        return summary
    
    def generate_report(self, analysis: Dict[str, Any] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if analysis is None:
            analysis = self.analyze_performance()
        
        report = "# –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ microWakeWord\n\n"
        
        for metric_name, metric_analysis in analysis.items():
            report += f"## {metric_name}\n\n"
            
            if 'error' in metric_analysis:
                report += f"‚ùå {metric_analysis['error']}\n\n"
                continue
            
            report += f"- **–û–±—Ä–∞–∑—Ü–æ–≤**: {metric_analysis['total_samples']}\n"
            
            if 'time_range' in metric_analysis:
                report += f"- **–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω**: {metric_analysis['time_range']['start']} - {metric_analysis['time_range']['end']}\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∏—Å–ª–æ–≤—ã–º –ø–æ–ª—è–º
            for field, stats in metric_analysis.items():
                if field.endswith('_stats'):
                    field_name = field.replace('_stats', '')
                    report += f"\n### {field_name}\n"
                    report += f"- **–°—Ä–µ–¥–Ω–µ–µ**: {stats['mean']:.2f}\n"
                    report += f"- **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ**: {stats['std']:.2f}\n"
                    report += f"- **–ú–∏–Ω–∏–º—É–º**: {stats['min']:.2f}\n"
                    report += f"- **–ú–∞–∫—Å–∏–º—É–º**: {stats['max']:.2f}\n"
                    report += f"- **–ú–µ–¥–∏–∞–Ω–∞**: {stats['median']:.2f}\n"
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤–æ–¥–∫–∏
            if 'performance_summary' in metric_analysis:
                perf = metric_analysis['performance_summary']
                report += f"\n### –°–≤–æ–¥–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"
                report += f"- **–û–±—â–µ–µ –≤—Ä–µ–º—è**: {perf['total_time']:.2f} —Å–µ–∫\n"
                report += f"- **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è**: {perf['average_time']:.2f} —Å–µ–∫\n"
                report += f"- **–í—ã–ø–æ–ª–Ω–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É**: {perf['executions_per_second']:.2f}\n"
            
            if 'system_summary' in metric_analysis:
                sys = metric_analysis['system_summary']
                if 'cpu' in sys:
                    report += f"\n### CPU\n"
                    report += f"- **–°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞**: {sys['cpu']['average_usage']:.1f}%\n"
                    report += f"- **–ü–∏–∫–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞**: {sys['cpu']['peak_usage']:.1f}%\n"
                    report += f"- **–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å**: {sys['cpu']['usage_stability']:.1%}\n"
                
                if 'memory' in sys:
                    report += f"\n### –ü–∞–º—è—Ç—å\n"
                    report += f"- **–°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**: {sys['memory']['average_usage']:.1f}%\n"
                    report += f"- **–ü–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**: {sys['memory']['peak_usage']:.1f}%\n"
                    report += f"- **–¢—Ä–µ–Ω–¥**: {sys['memory']['usage_trend']}\n"
            
            report += "\n"
        
        return report
    
    def save_results(self, filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"performance_profile_{timestamp}"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        raw_data_file = self.results_dir / f"{filename}_raw.json"
        with open(raw_data_file, 'w', encoding='utf-8') as f:
            json.dump(self.metrics, f, ensure_ascii=False, indent=2)
        
        # –ê–Ω–∞–ª–∏–∑ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        analysis = self.analyze_performance()
        analysis_file = self.results_dir / f"{filename}_analysis.json"
        with open(analysis_file, 'w', encoding='utf-8') as f:
            json.dump(analysis, f, ensure_ascii=False, indent=2)
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = self.generate_report(analysis)
        report_file = self.results_dir / f"{filename}_report.md"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        print(f"  - –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {raw_data_file}")
        print(f"  - –ê–Ω–∞–ª–∏–∑: {analysis_file}")
        print(f"  - –û—Ç—á–µ—Ç: {report_file}")
    
    def clear_metrics(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        self.metrics.clear()
        print("üßπ –ú–µ—Ç—Ä–∏–∫–∏ –æ—á–∏—â–µ–Ω—ã")


def profile_function(func_name: str = None):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            name = func_name or func.__name__
            profiler = PerformanceProfiler()
            
            with profiler.profile_function(name):
                return func(*args, **kwargs)
        
        return wrapper
    return decorator


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    profiler = PerformanceProfiler()
    
    print("üîç –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ microWakeWord")
    
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    @profile_function("test_function")
    def test_function():
        time.sleep(1)
        return sum(range(1000))
    
    result = test_function()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {result}")
    
    # –ü—Ä–∏–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã
    profiler.start_system_monitoring(duration=10, interval=0.5)
    time.sleep(12)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    
    # –ê–Ω–∞–ª–∏–∑ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    analysis = profiler.analyze_performance()
    profiler.save_results("test_profile")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    main()