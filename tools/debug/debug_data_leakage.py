#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ç–µ—á–∫—É –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É train/test –Ω–∞–±–æ—Ä–∞–º–∏
"""

import os
import sys
import numpy as np
import librosa
import glob
import hashlib
from collections import defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ microWakeWord
sys.path.append('/home/microWakeWord')
from src.utils.path_manager import paths

def get_file_hash(file_path):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ö–µ—à —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'rb') as f:
            return hashlib.md5(f.read()).hexdigest()
    except:
        return None

def get_audio_hash(file_path):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ö–µ—à –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        audio, sr = librosa.load(file_path, sr=16000, mono=True)
        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 1.5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        target_samples = int(1.5 * sr)
        if len(audio) > target_samples:
            audio = audio[:target_samples]
        else:
            audio = np.pad(audio, (0, target_samples - len(audio)))
        
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –æ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
        return hashlib.md5(audio.tobytes()).hexdigest()
    except:
        return None

def check_data_leakage():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Ç–µ—á–∫—É –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É train/test"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ù–ê –£–¢–ï–ß–ö–£ –î–ê–ù–ù–´–•:")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
    positives_dir = paths.POSITIVES_RAW
    negatives_dir = paths.NEGATIVES_RAW
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã
    positive_files = glob.glob(os.path.join(positives_dir, "*.wav"))[:200]
    negative_files = glob.glob(os.path.join(negatives_dir, "*.wav"))[:200]
    
    print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(positive_files)} –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∏ {len(negative_files)} –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í –§–ê–ô–õ–û–í:")
    
    file_hashes = defaultdict(list)
    audio_hashes = defaultdict(list)
    
    all_files = positive_files + negative_files
    
    for file_path in all_files:
        file_hash = get_file_hash(file_path)
        audio_hash = get_audio_hash(file_path)
        
        if file_hash:
            file_hashes[file_hash].append(file_path)
        if audio_hash:
            audio_hashes[audio_hash].append(file_path)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
    file_duplicates = {h: files for h, files in file_hashes.items() if len(files) > 1}
    audio_duplicates = {h: files for h, files in audio_hashes.items() if len(files) > 1}
    
    print(f"üìä –î—É–±–ª–∏–∫–∞—Ç—ã —Ñ–∞–π–ª–æ–≤: {len(file_duplicates)}")
    print(f"üìä –î—É–±–ª–∏–∫–∞—Ç—ã –∞—É–¥–∏–æ: {len(audio_duplicates)}")
    
    if file_duplicates:
        print(f"\nüö® –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´ –§–ê–ô–õ–û–í:")
        for i, (hash_val, files) in enumerate(list(file_duplicates.items())[:5]):
            print(f"  {i+1}. –•–µ—à {hash_val[:8]}...:")
            for file_path in files:
                print(f"     - {os.path.basename(file_path)}")
    
    if audio_duplicates:
        print(f"\nüö® –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´ –ê–£–î–ò–û:")
        for i, (hash_val, files) in enumerate(list(audio_duplicates.items())[:5]):
            print(f"  {i+1}. –ê—É–¥–∏–æ —Ö–µ—à {hash_val[:8]}...:")
            for file_path in files:
                print(f"     - {os.path.basename(file_path)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüìà –ê–ù–ê–õ–ò–ó –°–¢–ê–¢–ò–°–¢–ò–ö –î–ê–ù–ù–´–•:")
    
    pos_data = []
    neg_data = []
    
    for file_path in positive_files[:50]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 50 –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        try:
            audio, sr = librosa.load(file_path, sr=16000, mono=True)
            target_samples = int(1.5 * sr)
            if len(audio) > target_samples:
                audio = audio[:target_samples]
            else:
                audio = np.pad(audio, (0, target_samples - len(audio)))
            pos_data.append(audio)
        except:
            pass
    
    for file_path in negative_files[:50]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 50 –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        try:
            audio, sr = librosa.load(file_path, sr=16000, mono=True)
            target_samples = int(1.5 * sr)
            if len(audio) > target_samples:
                audio = audio[:target_samples]
            else:
                audio = np.pad(audio, (0, target_samples - len(audio)))
            neg_data.append(audio)
        except:
            pass
    
    if pos_data and neg_data:
        pos_data = np.array(pos_data)
        neg_data = np.array(neg_data)
        
        print(f"   –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ: mean={np.mean(pos_data):.3f}, std={np.std(pos_data):.3f}")
        print(f"   –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ: mean={np.mean(neg_data):.3f}, std={np.std(neg_data):.3f}")
        print(f"   –†–∞–∑–Ω–∏—Ü–∞: {abs(np.mean(pos_data) - np.mean(neg_data)):.3f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
        pos_min, pos_max = np.min(pos_data), np.max(pos_data)
        neg_min, neg_max = np.min(neg_data), np.max(neg_data)
        
        overlap = max(0, min(pos_max, neg_max) - max(pos_min, neg_min))
        pos_range = pos_max - pos_min
        neg_range = neg_max - neg_min
        
        print(f"   –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤: {overlap:.3f}")
        print(f"   –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {pos_range:.3f}")
        print(f"   –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {neg_range:.3f}")
        
        if overlap / max(pos_range, neg_range) > 0.8:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–∏–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π!")
        else:
            print("‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –ò–ú–ï–ù –§–ê–ô–õ–û–í:")
    
    pos_names = [os.path.basename(f) for f in positive_files[:20]]
    neg_names = [os.path.basename(f) for f in negative_files[:20]]
    
    print(f"   –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã (–ø–µ—Ä–≤—ã–µ 5): {pos_names[:5]}")
    print(f"   –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã (–ø–µ—Ä–≤—ã–µ 5): {neg_names[:5]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    pos_prefixes = set([name.split('_')[0] for name in pos_names if '_' in name])
    neg_prefixes = set([name.split('_')[0] for name in neg_names if '_' in name])
    
    common_prefixes = pos_prefixes.intersection(neg_prefixes)
    if common_prefixes:
        print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±—â–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –≤ –∏–º–µ–Ω–∞—Ö: {common_prefixes}")
    else:
        print("‚úÖ –ù–µ—Ç –æ–±—â–∏—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤")
    
    return {
        'file_duplicates': len(file_duplicates),
        'audio_duplicates': len(audio_duplicates),
        'pos_data_mean': np.mean(pos_data) if len(pos_data) > 0 else 0,
        'neg_data_mean': np.mean(neg_data) if len(neg_data) > 0 else 0,
        'data_difference': abs(np.mean(pos_data) - np.mean(neg_data)) if len(pos_data) > 0 and len(neg_data) > 0 else 0
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–†–û–í–ï–†–ö–ê –ù–ê –£–¢–ï–ß–ö–£ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    results = check_data_leakage()
    
    print(f"\nüéâ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if results['file_duplicates'] > 0 or results['audio_duplicates'] > 0:
        print("üö® –û–ë–ù–ê–†–£–ñ–ï–ù–ê –£–¢–ï–ß–ö–ê –î–ê–ù–ù–´–•!")
        print("   - –ï—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö")
        print("   - –≠—Ç–æ –º–æ–∂–µ—Ç –æ–±—ä—è—Å–Ω–∏—Ç—å 100% —Ç–æ—á–Ω–æ—Å—Ç—å")
    elif results['data_difference'] < 5:
        print("‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û –ú–ê–õ–ê–Ø –†–ê–ó–ù–ò–¶–ê –í –î–ê–ù–ù–´–•!")
        print("   - –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–∏")
        print("   - –≠—Ç–æ –º–æ–∂–µ—Ç –æ–±—ä—è—Å–Ω–∏—Ç—å 100% —Ç–æ—á–Ω–æ—Å—Ç—å")
    else:
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   - –ù–µ—Ç —è–≤–Ω–æ–π —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        print("   - –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –º–æ–¥–µ–ª–∏")

if __name__ == "__main__":
    main()