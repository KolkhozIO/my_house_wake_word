#!/usr/bin/env python3
"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è microWakeWord –ø–∞–π–ø–ª–∞–π–Ω–∞
–° –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
"""

import logging
import logging.handlers
import os
import sys
import time
from pathlib import Path
from datetime import datetime
import json
import threading
from typing import Optional, Dict, Any

class FlushStreamHandler(logging.StreamHandler):
    """StreamHandler —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º flush –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫"""
    def emit(self, record):
        super().emit(record)
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        self.stream.write('\n')
        self.flush()

class NewlineFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫"""
    
    def format(self, record):
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted = super().format(record)
        
        # –£–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ –∫–æ–Ω—Ü–µ
        formatted = formatted.rstrip('\n\r')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        return formatted + '\n'

class CentralizedLogger:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫"""
    
    def __init__(self, name="microWakeWord", log_dir="/home/microWakeWord/logs"):
        self.name = name
        self.log_dir = Path(log_dir)
        self.log_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
        self.logger = logging.getLogger(name)
        self.logger.setLevel(logging.DEBUG)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.logger.handlers.clear()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
        self.formatter = NewlineFormatter(
            '%(asctime)s | %(levelname)-8s | %(name)-20s | %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._setup_handlers()
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self._lock = threading.Lock()
        
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ª–æ–≥–æ–≤ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫"""
        
        # 1. –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ (INFO –∏ –≤—ã—à–µ) —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
        console_handler = FlushStreamHandler(sys.stdout)
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(self.formatter)
        self.logger.addHandler(console_handler)
        
        # 2. –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤ (DEBUG –∏ –≤—ã—à–µ) —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
        main_log_file = self.log_dir / f"{self.name}_main.log"
        file_handler = logging.handlers.RotatingFileHandler(
            main_log_file,
            maxBytes=50*1024*1024,  # 50MB
            backupCount=5,
            encoding='utf-8'
        )
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(self.formatter)
        self.logger.addHandler(file_handler)
        
        # 3. –§–∞–π–ª –æ—à–∏–±–æ–∫ (ERROR –∏ –≤—ã—à–µ) —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
        error_log_file = self.log_dir / f"{self.name}_errors.log"
        error_handler = logging.handlers.RotatingFileHandler(
            error_log_file,
            maxBytes=10*1024*1024,  # 10MB
            backupCount=3,
            encoding='utf-8'
        )
        error_handler.setLevel(logging.ERROR)
        error_handler.setFormatter(self.formatter)
        self.logger.addHandler(error_handler)
        
        # 4. JSON –ª–æ–≥ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        json_log_file = self.log_dir / f"{self.name}_structured.json"
        self.json_handler = logging.handlers.RotatingFileHandler(
            json_log_file,
            maxBytes=20*1024*1024,  # 20MB
            backupCount=3,
            encoding='utf-8'
        )
        self.json_handler.setLevel(logging.INFO)
        
        # JSON —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
        json_formatter = JsonFormatter()
        self.json_handler.setFormatter(json_formatter)
        self.logger.addHandler(self.json_handler)
        
    def get_logger(self, component_name=None):
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        if component_name:
            return self.logger.getChild(component_name)
        return self.logger
    
    def info(self, message: str, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ INFO —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏"""
        with self._lock:
            self.logger.info(message, **kwargs)
    
    def debug(self, message: str, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ DEBUG —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏"""
        with self._lock:
            self.logger.debug(message, **kwargs)
    
    def warning(self, message: str, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ WARNING —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏"""
        with self._lock:
            self.logger.warning(message, **kwargs)
    
    def error(self, message: str, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ERROR —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏"""
        with self._lock:
            self.logger.error(message, **kwargs)
    
    def critical(self, message: str, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ CRITICAL —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏"""
        with self._lock:
            self.logger.critical(message, **kwargs)
    
    def log_task_start(self, task_name: str, command: str, pid: Optional[int] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫"""
        self.info(f"üöÄ –ó–ê–î–ê–ß–ê –ó–ê–ü–£–©–ï–ù–ê: {task_name}")
        self.info(f"   –ö–æ–º–∞–Ω–¥–∞: {command}")
        if pid:
            self.info(f"   PID: {pid}")
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._log_structured({
            "event": "task_start",
            "task_name": task_name,
            "command": command,
            "pid": pid,
            "timestamp": datetime.now().isoformat()
        })
    
    def log_task_end(self, task_name: str, return_code: int, duration: Optional[float] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫"""
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if return_code == 0 else "‚ùå –û–®–ò–ë–ö–ê"
        self.info(f"üèÅ –ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê: {task_name} - {status}")
        self.info(f"   –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {return_code}")
        if duration:
            self.info(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._log_structured({
            "event": "task_end",
            "task_name": task_name,
            "return_code": return_code,
            "duration": duration,
            "timestamp": datetime.now().isoformat()
        })
    
    def log_training_progress(self, epoch: int, batch: int, accuracy: float, loss: float, 
                            recall: Optional[float] = None, precision: Optional[float] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫"""
        metrics = f"Epoch: {epoch}, Batch: {batch}, Accuracy: {accuracy:.4f}, Loss: {loss:.4f}"
        if recall:
            metrics += f", Recall: {recall:.4f}"
        if precision:
            metrics += f", Precision: {precision:.4f}"
        
        self.info(f"üìä –û–ë–£–ß–ï–ù–ò–ï: {metrics}")
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._log_structured({
            "event": "training_progress",
            "epoch": epoch,
            "batch": batch,
            "accuracy": accuracy,
            "loss": loss,
            "recall": recall,
            "precision": precision,
            "timestamp": datetime.now().isoformat()
        })
    
    def log_resource_usage(self, cpu_percent: float, ram_mb: float, process_name: Optional[str] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫"""
        self.info(f"üíª –†–ï–°–£–†–°–´: CPU: {cpu_percent:.1f}%, RAM: {ram_mb:.1f} MB")
        if process_name:
            self.info(f"   –ü—Ä–æ—Ü–µ—Å—Å: {process_name}")
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._log_structured({
            "event": "resource_usage",
            "cpu_percent": cpu_percent,
            "ram_mb": ram_mb,
            "process_name": process_name,
            "timestamp": datetime.now().isoformat()
        })
    
    def log_data_generation(self, source_name: str, files_count: int, duration: Optional[float] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫"""
        self.info(f"üìÅ –î–ê–ù–ù–´–ï: {source_name} - {files_count} —Ñ–∞–π–ª–æ–≤")
        if duration:
            self.info(f"   –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._log_structured({
            "event": "data_generation",
            "source_name": source_name,
            "files_count": files_count,
            "duration": duration,
            "timestamp": datetime.now().isoformat()
        })
    
    def log_error(self, error_msg: str, component: Optional[str] = None, exception: Optional[Exception] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫"""
        if component:
            self.error(f"‚ùå –û–®–ò–ë–ö–ê –≤ {component}: {error_msg}")
        else:
            self.error(f"‚ùå –û–®–ò–ë–ö–ê: {error_msg}")
        
        if exception:
            self.logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._log_structured({
            "event": "error",
            "component": component,
            "error_msg": error_msg,
            "exception": str(exception) if exception else None,
            "timestamp": datetime.now().isoformat()
        })
    
    def log_subprocess_output(self, process_name: str, output: str, is_error: bool = False):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ subprocess —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫"""
        level = self.error if is_error else self.info
        prefix = "‚ùå –û–®–ò–ë–ö–ê" if is_error else "üìÑ –í–´–í–û–î"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é
        lines = output.strip().split('\n')
        for line in lines:
            if line.strip():  # –¢–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                level(f"{prefix} [{process_name}]: {line.strip()}")
    
    def log_process_status(self, task_name: str, status: str, details: Optional[str] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫"""
        self.info(f"üîÑ –°–¢–ê–¢–£–° [{task_name}]: {status}")
        if details:
            self.info(f"   –î–µ—Ç–∞–ª–∏: {details}")
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._log_structured({
            "event": "process_status",
            "task_name": task_name,
            "status": status,
            "details": details,
            "timestamp": datetime.now().isoformat()
        })
    
    def _log_structured(self, data: Dict[str, Any]):
        """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ JSON —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫"""
        json_logger = logging.getLogger(f"{self.name}.json")
        json_logger.info(json.dumps(data, ensure_ascii=False))
    
    def cleanup_old_logs(self, days: int = 7):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
        cutoff_time = time.time() - (days * 24 * 60 * 60)
        
        for log_file in self.log_dir.glob("*.log*"):
            if log_file.stat().st_mtime < cutoff_time:
                log_file.unlink()
                self.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥: {log_file.name}")

class JsonFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è JSON –ª–æ–≥–æ–≤ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫"""
    
    def format(self, record):
        log_data = {
            "timestamp": datetime.fromtimestamp(record.created).isoformat(),
            "level": record.levelname,
            "logger": record.name,
            "message": record.getMessage()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(record, 'extra_data'):
            log_data.update(record.extra_data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏
        return json.dumps(log_data, ensure_ascii=False) + '\n'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
_global_logger = None
_logger_lock = threading.Lock()

def get_logger(component_name: Optional[str] = None):
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
    global _global_logger
    with _logger_lock:
        if _global_logger is None:
            _global_logger = CentralizedLogger()
        return _global_logger.get_logger(component_name)

def setup_logging(log_dir: str = "/home/microWakeWord/logs"):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
    global _global_logger
    with _logger_lock:
        _global_logger = CentralizedLogger(log_dir=log_dir)
        return _global_logger

def log_print(message: str, level: str = "info"):
    """–ó–∞–º–µ–Ω–∞ print() –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫"""
    logger = get_logger()
    
    # –£–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    clean_message = message.rstrip('\n\r')
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å –Ω—É–∂–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
    if level.lower() == "debug":
        logger.debug(clean_message)
    elif level.lower() == "warning":
        logger.warning(clean_message)
    elif level.lower() == "error":
        logger.error(clean_message)
    elif level.lower() == "critical":
        logger.critical(clean_message)
    else:  # default to info
        logger.info(clean_message)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger_system = setup_logging()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    train_logger = get_logger("training")
    data_logger = get_logger("data_generation")
    
    # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    logger_system.log_task_start("test_task", "python test.py", pid=12345)
    logger_system.log_training_progress(1, 100, 0.95, 0.1, 0.92, 0.98)
    logger_system.log_resource_usage(75.5, 1024.3, "python training.py")
    logger_system.log_data_generation("positives", 1000, 30.5)
    logger_system.log_task_end("test_task", 0, 120.5)
    
    # –¢–µ—Å—Ç –∑–∞–º–µ–Ω—ã print
    log_print("‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")
    log_print("–¢–µ—Å—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫", "info")
    log_print("–¢–µ—Å—Ç –æ—à–∏–±–∫–∏", "error")