#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω –º–æ–¥–µ–ª–µ–π —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
"""

import os
import sys
from datetime import datetime
from pathlib import Path

def generate_model_name(comment=""):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    now = datetime.now()
    timestamp = now.strftime("%Y%m%d_%H%M")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–º–ø–ª–æ–≤
    negatives_count = len(list(Path("/home/microWakeWord_data/negatives_real_sampled").glob("*.wav")))
    background_count = len(list(Path("/home/microWakeWord_data/background_data_sampled").glob("*.wav")))
    positives_count = len(list(Path("/home/microWakeWord_data/positives_final").glob("*.wav")))
    
    total_samples = negatives_count + background_count + positives_count
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    description_parts = []
    
    if negatives_count > 0:
        description_parts.append(f"neg_{negatives_count//1000}k")
    
    if background_count > 0:
        description_parts.append(f"bg_{background_count//1000}k")
    
    if positives_count > 0:
        description_parts.append(f"pos_{positives_count//1000}k")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–º–ø–ª–æ–≤
    description_parts.append(f"total_{total_samples//1000}k")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
    if comment:
        # –û—á–∏—â–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        clean_comment = "".join(c for c in comment if c.isalnum() or c in "_-").replace(" ", "_")
        description_parts.append(clean_comment)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
    description = "_".join(description_parts)
    model_name = f"model_{timestamp}_{description}.tflite"
    
    return model_name, {
        "timestamp": timestamp,
        "negatives_count": negatives_count,
        "background_count": background_count,
        "positives_count": positives_count,
        "total_samples": total_samples,
        "comment": comment,
        "description": description
    }

def update_training_config(model_name):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏"""
    
    config_file = "/home/microWakeWord/training_parameters.yaml"
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open(config_file, 'r') as f:
        content = f.read()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
    new_content = content.replace(
        "train_dir: trained_models/wakeword",
        f"train_dir: trained_models/{model_name.replace('.tflite', '')}"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open(config_file, 'w') as f:
        f.write(new_content)
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–∏: {model_name}")

def create_model_manifest(model_name, model_info):
    """–°–æ–∑–¥–∞–µ—Ç JSON –º–∞–Ω–∏—Ñ–µ—Å—Ç –¥–ª—è –º–æ–¥–µ–ª–∏"""
    
    manifest_content = {
        "version": 2,
        "type": "micro",
        "model_path": f"trained_models/{model_name.replace('.tflite', '')}/{model_name}",
        "metadata": {
            "created_at": datetime.now().isoformat(),
            "timestamp": model_info["timestamp"],
            "negatives_samples": model_info["negatives_count"],
            "background_samples": model_info["background_count"],
            "positives_samples": model_info["positives_count"],
            "total_samples": model_info["total_samples"],
            "comment": model_info["comment"],
            "description": model_info["description"]
        },
        "parameters": {
            "probability_cutoff": 0.95,
            "sliding_window_size": 5,
            "tensor_arena_size": 1000000
        }
    }
    
    import json
    manifest_file = f"/home/microWakeWord_data/{model_name.replace('.tflite', '.json')}"
    
    with open(manifest_file, 'w') as f:
        json.dump(manifest_content, f, indent=2)
    
    print(f"‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: {manifest_file}")
    return manifest_file

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    if len(sys.argv) < 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python generate_unique_model_name.py '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö'")
        print("–ü—Ä–∏–º–µ—Ä: python generate_unique_model_name.py 'max_coverage_sampling_840k_samples'")
        sys.exit(1)
    
    comment = sys.argv[1]
    
    print("=== –ì–ï–ù–ï–†–ê–¶–ò–Ø –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û –ò–ú–ï–ù–ò –ú–û–î–ï–õ–ò ===")
    print(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –º–æ–¥–µ–ª–∏
    model_name, model_info = generate_model_name(comment)
    
    print(f"\nüìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ú–û–î–ï–õ–ò:")
    print(f"   –ò–º—è: {model_name}")
    print(f"   –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞: {model_info['timestamp']}")
    print(f"   –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–º–ø–ª—ã: {model_info['negatives_count']:,}")
    print(f"   –§–æ–Ω–æ–≤—ã–µ —Å–µ–º–ø–ª—ã: {model_info['background_count']:,}")
    print(f"   –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–µ–º–ø–ª—ã: {model_info['positives_count']:,}")
    print(f"   –í—Å–µ–≥–æ —Å–µ–º–ø–ª–æ–≤: {model_info['total_samples']:,}")
    print(f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {model_info['comment']}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    update_training_config(model_name)
    
    # –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
    manifest_file = create_model_manifest(model_name, model_info)
    
    print(f"\nüéØ –ì–û–¢–û–í–û!")
    print(f"   –ú–æ–¥–µ–ª—å: {model_name}")
    print(f"   –ú–∞–Ω–∏—Ñ–µ—Å—Ç: {manifest_file}")
    print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    
    return model_name

if __name__ == "__main__":
    model_name = main()
    print(f"\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print(f"   ./manage_tasks.sh start train_model")
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {model_name}")