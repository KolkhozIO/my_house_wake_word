#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –µ–¥–∏–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ microWakeWord –ø–∞–π–ø–ª–∞–π–Ω–∞
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
"""

import yaml
import os
import sys
from pathlib import Path
from typing import Dict, Any, List, Tuple
import numpy as np
from centralized_logger import setup_logging, get_logger

class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –µ–¥–∏–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    def __init__(self, config_path: str = "unified_config.yaml"):
        self.config_path = Path(config_path)
        self.config = {}
        self.logger = get_logger("config_manager")
        self._load_config()
        self._validate_config()
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                self.config = yaml.safe_load(f)
            self.logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {self.config_path}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            raise
    
    def _validate_config(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
        required_sections = ['audio', 'model', 'augmentation', 'paths', 'validation']
        for section in required_sections:
            if section not in self.config:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è: {section}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—É–¥–∏–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self._validate_audio_params()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–µ–π
        self._validate_paths()
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self._sync_parameters()
        
        self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    def _validate_audio_params(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∞—É–¥–∏–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        audio = self.config['audio']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        clip_duration_ms = audio['clip_duration_ms']
        window_step_ms = audio['window_step_ms']
        step_ms = audio['step_ms']
        
        # –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π –¥–ª–∏–Ω—ã —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã
        expected_frames = clip_duration_ms / window_step_ms
        model_input_shape = self.config['model']['input_shape']
        
        if abs(expected_frames - model_input_shape[0]) > 1:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª–∏–Ω—ã —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã:")
            self.logger.warning(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_frames} –∫–∞–¥—Ä–æ–≤")
            self.logger.warning(f"   –ú–æ–¥–µ–ª—å: {model_input_shape[0]} –∫–∞–¥—Ä–æ–≤")
            self.logger.warning(f"   –†–∞–∑–Ω–∏—Ü–∞: {abs(expected_frames - model_input_shape[0])} –∫–∞–¥—Ä–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ step_ms –∏ window_step_ms
        if step_ms != window_step_ms:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
            self.logger.warning(f"   step_ms: {step_ms}")
            self.logger.warning(f"   window_step_ms: {window_step_ms}")
            self.logger.warning("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    
    def _validate_paths(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–µ–π –∫ –¥–∞–Ω–Ω—ã–º"""
        paths = self.config['paths']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        base_dirs = ['data_root', 'models_root', 'logs_root']
        for dir_name in base_dirs:
            dir_path = Path(paths[dir_name])
            if not dir_path.exists():
                self.logger.warning(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {dir_path}")
                self.logger.info(f"   –°–æ–∑–¥–∞—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {dir_path}")
                dir_path.mkdir(parents=True, exist_ok=True)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        sources = paths['sources']
        for source_name, source_path in sources.items():
            if not Path(source_path).exists():
                self.logger.warning(f"‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {source_name} -> {source_path}")
    
    def _sync_parameters(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        self.logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è step_ms –∏ window_step_ms
        audio = self.config['audio']
        if audio['step_ms'] != audio['window_step_ms']:
            self.logger.info(f"   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é step_ms: {audio['step_ms']} -> {audio['window_step_ms']}")
            audio['step_ms'] = audio['window_step_ms']
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—É–¥–∏–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        clip_duration_ms = audio['clip_duration_ms']
        window_step_ms = audio['window_step_ms']
        expected_frames = int(clip_duration_ms / window_step_ms)
        
        model_input_shape = self.config['model']['input_shape']
        if model_input_shape[0] != expected_frames:
            self.logger.info(f"   –û–±–Ω–æ–≤–ª—è—é —Ñ–æ—Ä–º—É –º–æ–¥–µ–ª–∏: {model_input_shape[0]} -> {expected_frames}")
            self.config['model']['input_shape'] = [expected_frames, model_input_shape[1]]
        
        self.logger.info("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    def get_audio_params(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        return self.config['audio'].copy()
    
    def get_model_params(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏"""
        return self.config['model'].copy()
    
    def get_augmentation_params(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        return self.config['augmentation'].copy()
    
    def get_paths(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–µ–π"""
        return self.config['paths'].copy()
    
    def get_validation_params(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        return self.config['validation'].copy()
    
    def get_performance_params(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return self.config['performance'].copy()
    
    def calculate_spectrogram_length(self) -> int:
        """–†–∞—Å—á–µ—Ç –¥–ª–∏–Ω—ã —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        audio = self.config['audio']
        clip_duration_ms = audio['clip_duration_ms']
        window_step_ms = audio['window_step_ms']
        return int(clip_duration_ms / window_step_ms)
    
    def validate_data_model_compatibility(self, data_shape: Tuple[int, int]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–∏"""
        model_input_shape = self.config['model']['input_shape']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ñ–æ—Ä–º
        if data_shape != tuple(model_input_shape):
            self.logger.error(f"‚ùå –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ñ–æ—Ä–º:")
            self.logger.error(f"   –î–∞–Ω–Ω—ã–µ: {data_shape}")
            self.logger.error(f"   –ú–æ–¥–µ–ª—å: {model_input_shape}")
            return False
        
        self.logger.info(f"‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ñ–æ—Ä–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {data_shape}")
        return True
    
    def generate_training_config(self, output_path: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        self.logger.info(f"üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è: {output_path}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ microWakeWord
        training_config = {
            'batch_size': self.config['model']['batch_size'],
            'clip_duration_ms': self.config['audio']['clip_duration_ms'],
            'eval_step_interval': self.config['model']['eval_step_interval'],
            'features': [],
            'freq_mask_count': self.config['augmentation']['freq_mask_count'],
            'freq_mask_max_size': self.config['augmentation']['freq_mask_max_size'],
            'learning_rates': [self.config['model']['learning_rate']],
            'maximization_metric': self.config['model']['maximization_metric'],
            'minimization_metric': self.config['model']['minimization_metric'],
            'negative_class_weight': self.config['model']['negative_class_weight'],
            'positive_class_weight': self.config['model']['positive_class_weight'],
            'target_minimization': self.config['model']['target_minimization'],
            'time_mask_count': self.config['augmentation']['time_mask_count'],
            'time_mask_max_size': self.config['augmentation']['time_mask_max_size'],
            'train_dir': 'trained_models/wakeword',
            'training_steps': self.config['model']['training_steps'] if isinstance(self.config['model']['training_steps'], list) else [self.config['model']['training_steps']],
            'window_step_ms': self.config['audio']['window_step_ms'],
            'spectrogram_length': self.calculate_spectrogram_length(),
            'spectrogram_length_final_layer': self.calculate_spectrogram_length() - 28,  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
            'stride': 1,
            'training_input_shape': self.config['model']['input_shape']
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        paths = self.config['paths']['generated']
        for source_name, source_path in paths.items():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
            if 'positive' in source_name:
                truth = True
            else:
                truth = False
            
            training_config['features'].append({
                'features_dir': source_path,
                'penalty_weight': 1.0,
                'sampling_weight': 1.0,
                'truncation_strategy': 'random',
                'truth': truth,
                'type': 'mmap'
            })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(output_path, 'w', encoding='utf-8') as f:
            yaml.dump(training_config, f, default_flow_style=False, allow_unicode=True)
        
        self.logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
        return output_path
    
    def save_config(self, output_path: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if output_path is None:
            output_path = self.config_path
        
        with open(output_path, 'w', encoding='utf-8') as f:
            yaml.dump(self.config, f, default_flow_style=False, allow_unicode=True)
        
        self.logger.info(f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
    
    def get_config_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return {
            'version': self.config['version']['config_version'],
            'audio_params': self.get_audio_params(),
            'model_params': self.get_model_params(),
            'spectrogram_length': self.calculate_spectrogram_length(),
            'data_sources': len(self.config['paths']['sources']),
            'generated_sources': len(self.config['paths']['generated'])
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
_config_manager = None

def get_config_manager() -> ConfigManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    global _config_manager
    if _config_manager is None:
        _config_manager = ConfigManager()
    return _config_manager

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger_system = setup_logging()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_manager = ConfigManager()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏
    summary = config_manager.get_config_summary()
    print("üìä –°–≤–æ–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    for key, value in summary.items():
        print(f"   {key}: {value}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è
    training_config_path = config_manager.generate_training_config("/home/microWakeWord_data/unified_training_config.yaml")
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: {training_config_path}")