#!/usr/bin/env python3
"""
–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è microWakeWord
"""

import os
import sys
import yaml
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/home/microWakeWord')
from src.utils.path_manager import paths

def create_smart_training_config(force_recreate=False, custom_params=None):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    
    Args:
        force_recreate (bool): –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        custom_params (dict): –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    """
    
    print("üîß –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –æ–±—É—á–µ–Ω–∏—è...", flush=True)
    
    data_dir = "/home/microWakeWord_data"
    config_path = os.path.join(data_dir, 'training_parameters.yaml')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º
    required_dirs = [
        os.path.join(paths.FEATURES_POSITIVES, "training", "wakeword_mmap"),
        os.path.join(paths.FEATURES_NEGATIVES, "training", "wakeword_mmap"),
    ]
    
    for dir_path in required_dirs:
        if not os.path.exists(dir_path):
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {dir_path}", flush=True)
            print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ generate_spectrograms.py", flush=True)
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    existing_config = None
    config_needs_update = False
    
    if os.path.exists(config_path) and not force_recreate:
        try:
            with open(config_path, 'r') as f:
                existing_config = yaml.safe_load(f)
            print("üìã –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", flush=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if existing_config:
                print(f"   clip_duration_ms: {existing_config.get('clip_duration_ms', '–ù–ï–¢')}", flush=True)
                print(f"   batch_size: {existing_config.get('batch_size', '–ù–ï–¢')}", flush=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                critical_checks = {
                    'clip_duration_ms': 1030,  # –î–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º (147, 40)
                    'window_step_ms': 10,
                    'batch_size': 32
                }
                
                for param, expected_value in critical_checks.items():
                    if existing_config.get(param) != expected_value:
                        print(f"‚ö†Ô∏è {param} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {existing_config.get(param)} != {expected_value}", flush=True)
                        config_needs_update = True
                
                if not config_needs_update:
                    print("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë", flush=True)
                    return True
                else:
                    print("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", flush=True)
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", flush=True)
            config_needs_update = True
    
    # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ YAML...", flush=True)
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã 147x40)
    base_config = {
        'batch_size': 32,
        'clip_duration_ms': 1030,  # –ö–†–ò–¢–ò–ß–ù–û: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∞–Ω–Ω—ã–º (147, 40)
        'eval_step_interval': 500,
        'features': [
            {
                'features_dir': paths.FEATURES_POSITIVES,
                'penalty_weight': 1.0,
                'sampling_weight': 1.0,
                'truncation_strategy': 'random',
                'truth': True,
                'type': 'mmap'
            },
            {
                'features_dir': paths.FEATURES_NEGATIVES,
                'penalty_weight': 1.0,
                'sampling_weight': 1.0,
                'truncation_strategy': 'random',
                'truth': False,
                'type': 'mmap'
            }
        ],
        'freq_mask_count': [2],
        'freq_mask_max_size': [15],
        'learning_rates': [0.001],
        'maximization_metric': 'average_viable_recall',
        'minimization_metric': None,
        'negative_class_weight': [1],
        'positive_class_weight': [1],
        'target_minimization': 0.9,
        'time_mask_count': [2],
        'time_mask_max_size': [15],
        'train_dir': os.path.join(data_dir, 'trained_models/wakeword'),
        'training_steps': [10000],
        'window_step_ms': 10
    }
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if custom_params:
        print("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", flush=True)
        for key, value in custom_params.items():
            if key in base_config:
                old_value = base_config[key]
                base_config[key] = value
                print(f"   {key}: {old_value} ‚Üí {value}", flush=True)
            else:
                print(f"   ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {key}", flush=True)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
    if existing_config and not force_recreate:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        preserve_keys = ['learning_rates', 'training_steps', 'negative_class_weight', 'positive_class_weight']
        for key in preserve_keys:
            if key in existing_config and key not in (custom_params or {}):
                base_config[key] = existing_config[key]
                print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: {key} = {existing_config[key]}", flush=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if existing_config and os.path.exists(config_path):
        backup_path = f"{config_path}.backup.{int(time.time())}"
        try:
            with open(backup_path, 'w') as f:
                yaml.dump(existing_config, f, default_flow_style=False)
            print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}", flush=True)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}", flush=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open(config_path, 'w') as f:
        yaml.dump(base_config, f, default_flow_style=False)
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {config_path}", flush=True)
    print(f"   clip_duration_ms: {base_config['clip_duration_ms']} (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∞–Ω–Ω—ã–º)", flush=True)
    print(f"   batch_size: {base_config['batch_size']}", flush=True)
    print(f"   training_steps: {base_config['training_steps']}", flush=True)
    
    return True

def validate_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...", flush=True)
    
    config_path = "/home/microWakeWord_data/training_parameters.yaml"
    
    if not os.path.exists(config_path):
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", flush=True)
        return False
    
    try:
        with open(config_path, 'r') as f:
            config = yaml.safe_load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        critical_params = {
            'clip_duration_ms': 1030,
            'window_step_ms': 10,
            'batch_size': 32
        }
        
        all_valid = True
        for param, expected_value in critical_params.items():
            actual_value = config.get(param)
            if actual_value != expected_value:
                print(f"‚ùå {param}: {actual_value} != {expected_value}", flush=True)
                all_valid = False
            else:
                print(f"‚úÖ {param}: {actual_value}", flush=True)
        
        if all_valid:
            print("üéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!", flush=True)
        else:
            print("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è", flush=True)
        
        return all_valid
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", flush=True)
        return False

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    validate_config()
    
    print()
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    custom_params = {
        'learning_rates': [0.0005],  # –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
        'training_steps': [5000]      # –ú–µ–Ω—å—à–µ —à–∞–≥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }
    
    success = create_smart_training_config(
        force_recreate=False,
        custom_params=custom_params
    )
    
    if success:
        print("‚úÖ –£–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        validate_config()
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")