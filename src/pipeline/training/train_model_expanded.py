#!/usr/bin/env python3
"""
–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ microWakeWord —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

import os
import sys
import subprocess
import psutil
import time
from pathlib import Path

def monitor_resources(process, duration=60):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    print(f"\nüìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞ (PID: {process.pid}) –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥...")
    
    start_time = time.time()
    max_cpu = 0
    max_ram = 0
    
    while time.time() - start_time < duration:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            proc_info = psutil.Process(process.pid)
            cpu_percent = proc_info.cpu_percent()
            ram_mb = proc_info.memory_info().rss / 1024 / 1024
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º—ã
            max_cpu = max(max_cpu, cpu_percent)
            max_ram = max(max_ram, ram_mb)
            
            # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            print(f"   CPU: {cpu_percent:.1f}%, RAM: {ram_mb:.1f} MB")
            
            time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            
        except psutil.NoSuchProcess:
            print(f"   –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
            break
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            break
    
    print(f"\nüìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:")
    print(f"   CPU: {max_cpu:.1f}%")
    print(f"   RAM: {max_ram:.1f} MB")
    
    return max_cpu, max_ram

def main():
    print("üöÄ –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò microWakeWord –° –†–ê–°–®–ò–†–ï–ù–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    config_file = "/home/microWakeWord_data/training_parameters.yaml"
    if not os.path.exists(config_file):
        print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_file}")
        return False
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {config_file}")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—É—á–µ–Ω–∏—è
    model_dir = "/home/microWakeWord_data/trained_models/wakeword"
    if os.path.exists(model_dir):
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏ –∏–∑ {model_dir}")
        try:
            import shutil
            shutil.rmtree(model_dir)
            os.makedirs(model_dir, exist_ok=True)
            print(f"‚úÖ –°—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞, –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏: {e}")
            return False
    else:
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏: {model_dir}")
        os.makedirs(model_dir, exist_ok=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ —É–∫–∞–∑–∞–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
    data_dirs = [
        "/home/microWakeWord_data/generated_features_negatives_final",
        "/home/microWakeWord_data/generated_features_positives_final",
        "/home/microWakeWord_data/generated_features_background",
        "/home/microWakeWord_data/generated_features_hard_negatives_parallel",
        "/home/microWakeWord_data/generated_features_negatives_both",
        "/home/microWakeWord_data/generated_features_positives_both",
        "/home/microWakeWord_data/generated_features_positives_enhanced",
        "/home/microWakeWord_data/generated_features_hard_negatives",
    ]
    
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    missing_dirs = []
    for data_dir in data_dirs:
        if os.path.exists(data_dir):
            print(f"   ‚úÖ {data_dir}")
        else:
            print(f"   ‚ùå {data_dir}")
            missing_dirs.append(data_dir)
    
    if missing_dirs:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {len(missing_dirs)}")
        return False
    
    print(f"\n‚úÖ –í—Å–µ {len(data_dirs)} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–π–¥–µ–Ω—ã!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ microwakeword
    microwakeword_path = "./microwakeword"
    if not os.path.exists(microwakeword_path):
        print(f"‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ microwakeword –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {microwakeword_path}")
        return False
    
    print(f"‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ microwakeword –Ω–∞–π–¥–µ–Ω–∞: {microwakeword_path}")
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ (–∏–∑ mww_orig) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º venv
    train_command = [
        "/home/microWakeWord/.venv/bin/python", "-m", "microwakeword.model_train_eval",
        "--training_config", config_file,
        "--train", "1",
        "--restore_checkpoint", "0",
        "--test_tf_nonstreaming", "0",
        "--test_tflite_nonstreaming", "0",
        "--test_tflite_nonstreaming_quantized", "0",
        "--test_tflite_streaming", "0",
        "--test_tflite_streaming_quantized", "0",
        "inception"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å inception
    ]
    
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏...")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(train_command)}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –≤—ã–≤–æ–¥–æ–≤
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏...")
        print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(train_command)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –ø–æ—Ç–æ–∫–æ–≤—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        process = subprocess.Popen(
            train_command,
            cwd="/home/microWakeWord",
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,  # –û–±—ä–µ–¥–∏–Ω—è–µ–º stderr –≤ stdout
            text=True,
            bufsize=1,  # –ù–µ–±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
            universal_newlines=True
        )
        
        # –ü–æ—Ç–æ–∫–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        stdout_lines = []
        print(f"\nüìÑ –õ–æ–≥–∏ –æ–±—É—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:")
        print("=" * 50)
        
        try:
            while True:
                line = process.stdout.readline()
                if not line:
                    break
                
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                clean_line = line.rstrip()
                if clean_line:
                    print(clean_line)
                    stdout_lines.append(clean_line)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
                if process.poll() is not None:
                    break
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞: {e}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        returncode = process.wait(timeout=3600)  # 1 —á–∞—Å —Ç–∞–π–º–∞—É—Ç
        
        result = type('Result', (), {
            'returncode': returncode,
            'stdout': '\n'.join(stdout_lines),
            'stderr': ''
        })()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è:")
        print(f"–ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {result.returncode}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º stdout –µ—Å–ª–∏ –µ—Å—Ç—å
        if result.stdout:
            print(f"\nüìÑ STDOUT:")
            print(result.stdout)
        
        # –õ–æ–≥–∏—Ä—É–µ–º stderr –µ—Å–ª–∏ –µ—Å—Ç—å
        if result.stderr:
            print(f"\n‚ö†Ô∏è STDERR:")
            print(result.stderr)
        
        if result.returncode == 0:
            print(f"\nüéâ –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            model_dir = "/home/microWakeWord_data/trained_models/wakeword"
            if os.path.exists(model_dir):
                print(f"‚úÖ –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {model_dir}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –º–æ–¥–µ–ª–∏
                model_files = list(Path(model_dir).glob("*"))
                if model_files:
                    print(f"\nüìÅ –§–∞–π–ª—ã –º–æ–¥–µ–ª–∏:")
                    for model_file in model_files:
                        print(f"   üìÑ {model_file.name}")
                else:
                    print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–∏ –ø—É—Å—Ç–∞")
            else:
                print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_dir}")
            
            return True
        else:
            print(f"\n‚ùå –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò –ó–ê–í–ï–†–®–ò–õ–û–°–¨ –° –û–®–ò–ë–ö–û–ô!")
            return False
            
    except subprocess.TimeoutExpired:
        print(f"\n‚è∞ –û–ë–£–ß–ï–ù–ò–ï –ü–†–ï–†–í–ê–ù–û –ü–û –¢–ê–ô–ú–ê–£–¢–£ (1 —á–∞—Å)")
        return False
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –û–ë–£–ß–ï–ù–ò–Ø: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)