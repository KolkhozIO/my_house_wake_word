#!/usr/bin/env python3
"""
–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —à—É–º–æ–º - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–¢–û–ß–ù–û –∫–æ–ø–∏—Ä—É–µ—Ç —Ä–∞–±–æ—á–∏–π –ø–æ–¥—Ö–æ–¥ –∏–∑ train_model_only.py
"""

import os
import sys
import yaml
import argparse
import logging
import numpy as np
from pathlib import Path

# –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ê–Ø –õ–ò–ù–ö–û–í–ö–ê –ü–£–¢–ï–ô –ò–ó XML
from src.utils.path_manager import paths

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
sys.stdout.reconfigure(line_buffering=True)

# –í–∞—Ä–∏–∞–Ω—Ç—ã —Å–º–µ—à–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–£–¢–ò –ò–ó XML –ë–ï–ó –•–ê–†–î–ö–û–î–ê
MIXED_VARIANTS = {
    "conservative": {
        "name": "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π",
        "positives_dir": paths.POSITIVES_RAW,  # –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–£–¢–¨ –ò–ó XML
        "negatives_dir": paths.NEGATIVES_RAW,  # –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–£–¢–¨ –ò–ó XML
        "hard_negatives_dir": paths.HARD_NEGATIVES_PARALLEL,  # –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–£–¢–¨ –ò–ó XML
    }
}

def create_training_config(variant_name):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ–±—É—á–µ–Ω–∏—è - –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–£–¢–ò –ò–ó XML"""
    logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ YAML –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞: {variant_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–£–¢–ò –ò–ó XML
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    
    if not os.path.exists(paths.FEATURES_POSITIVES):
        logger.error(f"‚ùå –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {paths.FEATURES_POSITIVES}")
        return None
    
    logger.info("‚úÖ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞–π–¥–µ–Ω—ã")
    logger.info("‚ö†Ô∏è –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    
    # –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–£–¢–ò –ò–ó XML –ë–ï–ó –•–ê–†–î–ö–û–î–ê
    config = {
        'batch_size': 32,
        'clip_duration_ms': 1500,
        'eval_step_interval': 500,
        'features': [
            {
                'features_dir': paths.FEATURES_POSITIVES,  # –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–£–¢–¨ –ò–ó XML
                'penalty_weight': 1.0,
                'sampling_weight': 1.0,
                'truncation_strategy': 'random',
                'truth': True,
                'type': 'mmap'
            },
            {
                'features_dir': paths.FEATURES_NEGATIVES,  # –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–£–¢–¨ –ò–ó XML
                'penalty_weight': 1.0,
                'sampling_weight': 1.0,
                'truncation_strategy': 'random',
                'truth': False,
                'type': 'mmap'
            }
        ],
        'freq_mask_count': [2],
        'freq_mask_max_size': [15],
        'learning_rates': [0.001],
        'maximization_metric': 'average_viable_recall',
        'minimization_metric': None,
        'negative_class_weight': [1],
        'positive_class_weight': [1],
        'target_minimization': 0.9,
        'time_mask_count': [2],
        'time_mask_max_size': [15],
        'train_dir': paths.get_model_dir(variant_name),  # –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–£–¢–¨ –ò–ó XML
        'training_steps': [10000],
        'window_step_ms': 10
    }
    
    logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –±–µ–∑ ambient –¥–∞–Ω–Ω—ã—Ö")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é - –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–£–¢–¨ –ò–ó XML
    config_path = paths.get_training_config_path(variant_name)
    with open(config_path, 'w') as f:
        yaml.dump(config, f, default_flow_style=False)
    
    logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {config_path}")
    return config_path

def train_model(variant_name):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ - –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–£–¢–ò –ò–ó XML"""
    
    logger.info(f"üéØ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞: {variant_name}")
    
    # –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–£–¢–¨ –ö –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ò–ó XML
    config_path = paths.get_training_config_path(variant_name)
    
    if not os.path.exists(config_path):
        logger.error(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {config_path}")
        return False
    
    logger.info("üéØ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–£–¢–¨ –ò–ó XML
    train_dir = paths.get_model_dir(variant_name)
    os.makedirs(train_dir, exist_ok=True)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –Ω–∞–ø—Ä—è–º—É—é –≤–º–µ—Å—Ç–æ subprocess - –¢–û–ß–ù–û –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ microwakeword...")
        
        import microwakeword.model_train_eval as mte
        import microwakeword.mixednet as mixednet
        import microwakeword.data as input_data
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç flags –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –¢–û–ß–ù–û –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ
        class Flags:
            def __init__(self):
                self.training_config = config_path
                self.pointwise_filters = "48,48,48,48"
                self.repeat_in_block = "1,1,1,1"
                self.mixconv_kernel_sizes = "[5],[9],[13],[21]"
                self.residual_connection = "0,0,0,0"
                self.first_conv_filters = 32
                self.first_conv_kernel_size = 3
                self.stride = 1
                self.spatial_attention = False
                self.temporal_attention = False
                self.attention_heads = 1
                self.attention_dim = 64
                self.pooled = False
                self.max_pool = False
        
        flags = Flags()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é - –¢–û–ß–ù–û –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ
        logger.info("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        config = mte.load_config(flags, mixednet)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö - –¢–û–ß–ù–û –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ
        logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        data_processor = input_data.FeatureHandler(config)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å - –¢–û–ß–ù–û –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ
        logger.info("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        model = mixednet.model(flags, config["training_input_shape"], config["batch_size"])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ - –¢–û–ß–ù–û –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è...")
        print("\nüöÄ –ó–ê–ü–£–°–ö –û–ë–£–ß–ï–ù–ò–Ø –ú–û–î–ï–õ–ò –ù–ê –°–ú–ï–®–ê–ù–ù–´–• –î–ê–ù–ù–´–•\n", flush=True)
        mte.train_model(config, model, data_processor, restore_checkpoint=True)
        
        logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("\n‚úÖ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!\n", flush=True)
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –û–ë–£–ß–ï–ù–ò–Ø: {e}", flush=True)
        print("‚ùå –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ò–õ–û–°–¨ –° –û–®–ò–ë–ö–û–ô!\n", flush=True)
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —à—É–º–æ–º - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")
    parser.add_argument("--variant", choices=list(MIXED_VARIANTS.keys()), 
                       default="conservative", help="–í–∞—Ä–∏–∞–Ω—Ç —Å–º–µ—à–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    args = parser.parse_args()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ
    variant_info = MIXED_VARIANTS[args.variant]
    variant_name = variant_info["name"]
    
    logger.info(f"üéØ –û–ë–£–ß–ï–ù–ò–ï –ù–ê –°–ú–ï–®–ê–ù–ù–´–• –î–ê–ù–ù–´–• –° –®–£–ú–û–ú - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")
    print(f"\nüéØ –û–ë–£–ß–ï–ù–ò–ï –ù–ê –°–ú–ï–®–ê–ù–ù–´–• –î–ê–ù–ù–´–• –° –®–£–ú–û–ú - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø", flush=True)
    logger.info(f"üìä –í–∞—Ä–∏–∞–Ω—Ç: {variant_name}")
    print(f"üìä –í–∞—Ä–∏–∞–Ω—Ç: {variant_name}\n", flush=True)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–±—É—á–µ–Ω–∏—è
    config_path = create_training_config(variant_name.lower())
    if not config_path:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!")
        return 1
    
    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    success = train_model(variant_name.lower())
    if success:
        logger.info(f"üéâ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        logger.info(f"üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_path}")
        logger.info(f"üöÄ –ì–æ—Ç–æ–≤–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è TFLite –º–æ–¥–µ–ª–∏!")
        print("\n‚úÖ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!", flush=True)
        return 0
    else:
        logger.error("‚ùå –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ò–õ–û–°–¨ –° –û–®–ò–ë–ö–û–ô!")
        print("\n‚ùå –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ò–õ–û–°–¨ –° –û–®–ò–ë–ö–û–ô!", flush=True)
        return 1

if __name__ == "__main__":
    sys.exit(main())