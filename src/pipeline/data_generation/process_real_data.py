#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import librosa
import numpy as np
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def process_audio_files(input_dir, output_dir, target_duration=1.5):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç, –æ–±—Ä–µ–∑–∞–µ—Ç, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç"""
    logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ {input_dir} –≤ {output_dir}")
    
    os.makedirs(output_dir, exist_ok=True)
    
    processed_count = 0
    error_count = 0
    
    for file_path in Path(input_dir).glob("*.wav"):
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
            audio, sr = librosa.load(str(file_path), sr=16000)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
            audio = librosa.util.normalize(audio)
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–æ —Ü–µ–ª–µ–≤–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            target_samples = int(target_duration * sr)
            if len(audio) > target_samples:
                # –ë–µ—Ä–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É
                start = (len(audio) - target_samples) // 2
                audio = audio[start:start + target_samples]
            elif len(audio) < target_samples:
                # –î–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏
                padding = target_samples - len(audio)
                audio = np.pad(audio, (0, padding), mode='constant')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            output_file = os.path.join(output_dir, file_path.name)
            librosa.output.write_wav(output_file, audio, sr)
            
            processed_count += 1
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {e}")
            error_count += 1
    
    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}, –û—à–∏–±–æ–∫: {error_count}")
    return processed_count, error_count

def split_dataset(data_dir, train_ratio=0.7, val_ratio=0.15, test_ratio=0.15):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç –Ω–∞ train/validation/test"""
    logger.info("üìä –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ –Ω–∞ train/validation/test")
    
    import random
    random.seed(42)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    splits = ["train", "validation", "test"]
    for split in splits:
        os.makedirs(os.path.join(data_dir, split), exist_ok=True)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    pos_dir = os.path.join(data_dir, "positives_processed")
    if os.path.exists(pos_dir):
        pos_files = list(Path(pos_dir).glob("*.wav"))
        random.shuffle(pos_files)
        
        n_train = int(len(pos_files) * train_ratio)
        n_val = int(len(pos_files) * val_ratio)
        
        train_files = pos_files[:n_train]
        val_files = pos_files[n_train:n_train + n_val]
        test_files = pos_files[n_train + n_val:]
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        for files, split in [(train_files, "train"), (val_files, "validation"), (test_files, "test")]:
            split_dir = os.path.join(data_dir, split, "positives")
            os.makedirs(split_dir, exist_ok=True)
            for file_path in files:
                import shutil
                shutil.copy2(file_path, os.path.join(split_dir, file_path.name))
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    neg_dir = os.path.join(data_dir, "negatives_processed")
    if os.path.exists(neg_dir):
        neg_files = list(Path(neg_dir).glob("*.wav"))
        random.shuffle(neg_files)
        
        n_train = int(len(neg_files) * train_ratio)
        n_val = int(len(neg_files) * val_ratio)
        
        train_files = neg_files[:n_train]
        val_files = neg_files[n_train:n_train + n_val]
        test_files = neg_files[n_train + n_val:]
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        for files, split in [(train_files, "train"), (val_files, "validation"), (test_files, "test")]:
            split_dir = os.path.join(data_dir, split, "negatives")
            os.makedirs(split_dir, exist_ok=True)
            for file_path in files:
                import shutil
                shutil.copy2(file_path, os.path.join(split_dir, file_path.name))
    
    logger.info("‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ train/validation/test")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üéØ –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
    
    real_data_dir = "/home/microWakeWord_data/real_wake_word_data"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    pos_raw = os.path.join(real_data_dir, "positives_raw")
    pos_processed = os.path.join(real_data_dir, "positives_processed")
    if os.path.exists(pos_raw):
        process_audio_files(pos_raw, pos_processed)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    neg_raw = os.path.join(real_data_dir, "noise_raw")
    neg_processed = os.path.join(real_data_dir, "negatives_processed")
    if os.path.exists(neg_raw):
        process_audio_files(neg_raw, neg_processed)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ train/validation/test
    split_dataset(real_data_dir)
    
    logger.info("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
