#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è TTS –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ö–æ–∂–∏–µ —Ñ—Ä–∞–∑—ã)
–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –∏–∑ generate_hard_negatives_parallel.py –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
"""

import os
import subprocess
import multiprocessing
from pathlib import Path
import random
from concurrent.futures import ProcessPoolExecutor, as_completed
from tqdm import tqdm

# –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ê–Ø –õ–ò–ù–ö–û–í–ö–ê –ü–£–¢–ï–ô –ò–ó XML –ë–ï–ó –•–ê–†–î–ö–û–î–ê
from src.utils.path_manager import paths

def run_command(cmd):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {cmd}")
            print(f"STDERR: {result.stderr}")
            return False
        return True
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def generate_phrase(args):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É —Ñ—Ä–∞–∑—É"""
    phrase, output_file, voices = args
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≥–æ–ª–æ—Å
    voice = random.choice(voices)
    
    tts_cmd = f"""
    echo "{phrase}" | piper --model {paths.DATA_ROOT}/piper_models/{voice}.onnx --output_file {output_file}
    """
    
    if run_command(tts_cmd):
        return True
    return False

def generate_negatives_tts():
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å TTS –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ - –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–£–¢–ò –ò–ó XML –ë–ï–ó –•–ê–†–î–ö–û–î–ê
    output_dir = paths.NEGATIVES_TTS
    os.makedirs(output_dir, exist_ok=True)
    
    # TTS –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã (—Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ "–º–∏–ª—ã–π –¥–æ–º" –∏ "–ª—é–±–∏–º—ã–π –¥–æ–º")
    negatives_phrases = [
        # –§–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ "–º–∏–ª—ã–π –¥–æ–º"
        "–º–æ–π —Ç–æ–º", "–º–æ–π –¥–æ–Ω", "–º–æ–π –¥–æ–º–∏–∫", "–º–æ–π –¥–æ–º —Ç–∞–º", "–º–æ–π –¥–æ–º–æ—Ñ–æ–Ω",
        "–º–æ–π –¥–æ–º-—Ç–æ", "–º–æ–π –¥–æ–º–æ–∫", "–º–æ–π –¥–æ–º–∏—â–µ", "–º–æ–π –¥–æ–º–æ–∫ —Ç–∞–º", "–º–æ–π –¥–æ–º–æ—á–µ–∫",
        "–º–∏–ª—ã–π —Ç–æ–º", "–º–∏–ª—ã–π –¥–æ–Ω", "–º–∏–ª—ã–π –¥–æ–º–∏–∫", "–º–∏–ª—ã–π –¥–æ–º —Ç–∞–º", "–º–∏–ª—ã–π –¥–æ–º–æ—Ñ–æ–Ω",
        "–º–∏–ª—ã–π –¥–æ–º-—Ç–æ", "–º–∏–ª—ã–π –¥–æ–º–æ–∫", "–º–∏–ª—ã–π –¥–æ–º–∏—â–µ", "–º–∏–ª—ã–π –¥–æ–º–æ–∫ —Ç–∞–º", "–º–∏–ª—ã–π –¥–æ–º–æ—á–µ–∫",
        
        # –§–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ "–ª—é–±–∏–º—ã–π –¥–æ–º"
        "–ª—é–±–∏–º—ã–π —Ç–æ–º", "–ª—é–±–∏–º—ã–π –¥–æ–Ω", "–ª—é–±–∏–º—ã–π –¥–æ–º–∏–∫", "–ª—é–±–∏–º—ã–π –¥–æ–º —Ç–∞–º", "–ª—é–±–∏–º—ã–π –¥–æ–º–æ—Ñ–æ–Ω",
        "–ª—é–±–∏–º—ã–π –¥–æ–º-—Ç–æ", "–ª—é–±–∏–º—ã–π –¥–æ–º–æ–∫", "–ª—é–±–∏–º—ã–π –¥–æ–º–∏—â–µ", "–ª—é–±–∏–º—ã–π –¥–æ–º–æ–∫ —Ç–∞–º", "–ª—é–±–∏–º—ã–π –¥–æ–º–æ—á–µ–∫",
        
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–æ—Ö–æ–∂–∏–µ
        "my home", "my dome", "my house", "my room", "my dome", "my home",
        "my tom", "my don", "my dom", "my home there", "my home phone",
        
        # –í—Å—Ç–∞–≤–∫–∏ –¥–æ/–ø–æ—Å–ª–µ
        "–Ω—É –º–∏–ª—ã–π –¥–æ–º —Ç–∞–º", "–≤–æ—Ç –º–∏–ª—ã–π –¥–æ–º–∏–∫", "—ç—Ç–æ –º–∏–ª—ã–π –¥–æ–º", "–¥–∞ –º–∏–ª—ã–π –¥–æ–º",
        "–æ—á–µ–Ω—å –ª—é–±–∏–º—ã–π –¥–æ–º", "—Å–∞–º—ã–π –ª—é–±–∏–º—ã–π –¥–æ–º", "—ç—Ç–æ –ª—é–±–∏–º—ã–π –¥–æ–º", "–≤–æ—Ç –ª—é–±–∏–º—ã–π –¥–æ–º",
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
        "–º–∏–ª—ã–π –¥–æ–º –¥–∞", "–º–∏–ª—ã–π –¥–æ–º –∂–µ", "–º–∏–ª—ã–π –¥–æ–º —Ç–æ", "–º–∏–ª—ã–π –¥–æ–º –∑–¥–µ—Å—å", "–º–∏–ª—ã–π –¥–æ–º –≤–µ–∑–¥–µ",
        "–ª—é–±–∏–º—ã–π –¥–æ–º –¥–∞", "–ª—é–±–∏–º—ã–π –¥–æ–º –∂–µ", "–ª—é–±–∏–º—ã–π –¥–æ–º —Ç–æ", "–ª—é–±–∏–º—ã–π –¥–æ–º –∑–¥–µ—Å—å",
        
        # –ï—â–µ –±–æ–ª—å—à–µ –ø–æ—Ö–æ–∂–∏—Ö
        "–º–∏–ª—ã–π –¥–æ–º–æ–∫", "–º–∏–ª—ã–π –¥–æ–º–æ–∫", "–ª—é–±–∏–º—ã–π –¥–æ–º–æ–∫", "–ª—é–±–∏–º—ã–π –¥–æ–º–æ–∫",
        "–º–∏–ª—ã–π –¥–æ–º —Ç–∞–º", "–º–∏–ª—ã–π –¥–æ–º –∑–¥–µ—Å—å", "–ª—é–±–∏–º—ã–π –¥–æ–º —Ç–∞–º", "–ª—é–±–∏–º—ã–π –¥–æ–º –∑–¥–µ—Å—å",
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        "–º–æ–π –º–∏–ª—ã–π –¥–æ–º", "–º–æ–π –ª—é–±–∏–º—ã–π –¥–æ–º", "—Ç–≤–æ–π –º–∏–ª—ã–π –¥–æ–º", "—Ç–≤–æ–π –ª—é–±–∏–º—ã–π –¥–æ–º",
        "–µ–≥–æ –º–∏–ª—ã–π –¥–æ–º", "–µ—ë –º–∏–ª—ã–π –¥–æ–º", "–Ω–∞—à –º–∏–ª—ã–π –¥–æ–º", "–Ω–∞—à –ª—é–±–∏–º—ã–π –¥–æ–º",
        "–¥–æ–º –º–∏–ª—ã–π", "–¥–æ–º –ª—é–±–∏–º—ã–π", "–¥–æ–º –∫—Ä–∞—Å–∏–≤—ã–π", "–¥–æ–º –±–æ–ª—å—à–æ–π",
        "–¥–æ–º —Ç–∞–º", "–¥–æ–º –∑–¥–µ—Å—å", "–¥–æ–º –≤–µ–∑–¥–µ", "–¥–æ–º –≤—Å–µ–≥–¥–∞",
        
        # –ï—â–µ –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞—Ü–∏–π
        "–º–∏–ª—ã–π –¥–æ–º–æ–∫", "–ª—é–±–∏–º—ã–π –¥–æ–º–æ–∫", "–º–∏–ª—ã–π –¥–æ–º–∏–∫", "–ª—é–±–∏–º—ã–π –¥–æ–º–∏–∫",
        "–º–∏–ª—ã–π –¥–æ–º–æ—á–µ–∫", "–ª—é–±–∏–º—ã–π –¥–æ–º–æ—á–µ–∫", "–º–∏–ª—ã–π –¥–æ–º–∏—â–µ", "–ª—é–±–∏–º—ã–π –¥–æ–º–∏—â–µ",
        "–º–∏–ª—ã–π –¥–æ–º–æ—Ñ–æ–Ω", "–ª—é–±–∏–º—ã–π –¥–æ–º–æ—Ñ–æ–Ω", "–º–∏–ª—ã–π –¥–æ–º-—Ç–æ", "–ª—é–±–∏–º—ã–π –¥–æ–º-—Ç–æ",
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        "–≤–æ—Ç –º–∏–ª—ã–π –¥–æ–º", "–≤–æ—Ç –ª—é–±–∏–º—ã–π –¥–æ–º", "—ç—Ç–æ –º–∏–ª—ã–π –¥–æ–º", "—ç—Ç–æ –ª—é–±–∏–º—ã–π –¥–æ–º",
        "–¥–∞ –º–∏–ª—ã–π –¥–æ–º", "–¥–∞ –ª—é–±–∏–º—ã–π –¥–æ–º", "–Ω—É –º–∏–ª—ã–π –¥–æ–º", "–Ω—É –ª—é–±–∏–º—ã–π –¥–æ–º",
        "–∞ –º–∏–ª—ã–π –¥–æ–º", "–∞ –ª—é–±–∏–º—ã–π –¥–æ–º", "–Ω–æ –º–∏–ª—ã–π –¥–æ–º", "–Ω–æ –ª—é–±–∏–º—ã–π –¥–æ–º",
        
        # –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ
        "–º–∏–ª—ã–π –¥–æ–º?", "–ª—é–±–∏–º—ã–π –¥–æ–º?", "–≥–¥–µ –º–∏–ª—ã–π –¥–æ–º?", "–≥–¥–µ –ª—é–±–∏–º—ã–π –¥–æ–º?",
        "—á—Ç–æ –º–∏–ª—ã–π –¥–æ–º?", "—á—Ç–æ –ª—é–±–∏–º—ã–π –¥–æ–º?", "–∫–∞–∫–æ–π –º–∏–ª—ã–π –¥–æ–º?", "–∫–∞–∫–æ–π –ª—é–±–∏–º—ã–π –¥–æ–º?",
        
        # –í–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ
        "–º–∏–ª—ã–π –¥–æ–º!", "–ª—é–±–∏–º—ã–π –¥–æ–º!", "–∫–∞–∫–æ–π –º–∏–ª—ã–π –¥–æ–º!", "–∫–∞–∫–æ–π –ª—é–±–∏–º—ã–π –¥–æ–º!",
        "–≤–æ—Ç –º–∏–ª—ã–π –¥–æ–º!", "–≤–æ—Ç –ª—é–±–∏–º—ã–π –¥–æ–º!", "—ç—Ç–æ –º–∏–ª—ã–π –¥–æ–º!", "—ç—Ç–æ –ª—é–±–∏–º—ã–π –¥–æ–º!",
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
        "–º–∏–ª—ã–π –¥–æ–º –¥–∞", "–ª—é–±–∏–º—ã–π –¥–æ–º –¥–∞", "–º–∏–ª—ã–π –¥–æ–º –∂–µ", "–ª—é–±–∏–º—ã–π –¥–æ–º –∂–µ",
        "–º–∏–ª—ã–π –¥–æ–º —Ç–æ", "–ª—é–±–∏–º—ã–π –¥–æ–º —Ç–æ", "–º–∏–ª—ã–π –¥–æ–º –∑–¥–µ—Å—å", "–ª—é–±–∏–º—ã–π –¥–æ–º –∑–¥–µ—Å—å",
        "–º–∏–ª—ã–π –¥–æ–º –≤–µ–∑–¥–µ", "–ª—é–±–∏–º—ã–π –¥–æ–º –≤–µ–∑–¥–µ", "–º–∏–ª—ã–π –¥–æ–º –≤—Å–µ–≥–¥–∞", "–ª—é–±–∏–º—ã–π –¥–æ–º –≤—Å–µ–≥–¥–∞",
        
        # –ï—â–µ –±–æ–ª—å—à–µ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        "–º–∏–ª—ã–π –¥–æ–º–æ–∫", "–ª—é–±–∏–º—ã–π –¥–æ–º–æ–∫", "–º–∏–ª—ã–π –¥–æ–º–∏–∫", "–ª—é–±–∏–º—ã–π –¥–æ–º–∏–∫",
        "–º–∏–ª—ã–π –¥–æ–º–æ—á–µ–∫", "–ª—é–±–∏–º—ã–π –¥–æ–º–æ—á–µ–∫", "–º–∏–ª—ã–π –¥–æ–º–∏—â–µ", "–ª—é–±–∏–º—ã–π –¥–æ–º–∏—â–µ",
        "–º–∏–ª—ã–π –¥–æ–º–æ—Ñ–æ–Ω", "–ª—é–±–∏–º—ã–π –¥–æ–º–æ—Ñ–æ–Ω", "–º–∏–ª—ã–π –¥–æ–º-—Ç–æ", "–ª—é–±–∏–º—ã–π –¥–æ–º-—Ç–æ",
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
        "–º–∏–ª—ã–π –¥–æ–º —Ç–∞–º", "–ª—é–±–∏–º—ã–π –¥–æ–º —Ç–∞–º", "–º–∏–ª—ã–π –¥–æ–º –∑–¥–µ—Å—å", "–ª—é–±–∏–º—ã–π –¥–æ–º –∑–¥–µ—Å—å",
        "–º–∏–ª—ã–π –¥–æ–º –≤–µ–∑–¥–µ", "–ª—é–±–∏–º—ã–π –¥–æ–º –≤–µ–∑–¥–µ", "–º–∏–ª—ã–π –¥–æ–º –≤—Å–µ–≥–¥–∞", "–ª—é–±–∏–º—ã–π –¥–æ–º –≤—Å–µ–≥–¥–∞",
        "–º–∏–ª—ã–π –¥–æ–º –¥–∞", "–ª—é–±–∏–º—ã–π –¥–æ–º –¥–∞", "–º–∏–ª—ã–π –¥–æ–º –∂–µ", "–ª—é–±–∏–º—ã–π –¥–æ–º –∂–µ",
        "–º–∏–ª—ã–π –¥–æ–º —Ç–æ", "–ª—é–±–∏–º—ã–π –¥–æ–º —Ç–æ", "–º–∏–ª—ã–π –¥–æ–º –∑–¥–µ—Å—å", "–ª—é–±–∏–º—ã–π –¥–æ–º –∑–¥–µ—Å—å"
    ]
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ Piper
    voices = [
        "ru_RU-denis-medium", "ru_RU-dmitri-medium", 
        "ru_RU-irina-medium", "ru_RU-ruslan-medium"
    ]
    
    print(f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TTS –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    print(f"üìä –§—Ä–∞–∑ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {len(negatives_phrases)}")
    print(f"üé§ –ì–æ–ª–æ—Å–∞: {voices}")
    print(f"üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
    tasks = []
    file_counter = 0
    
    for phrase in negatives_phrases:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–∞–∂–¥–æ–π —Ñ—Ä–∞–∑—ã
        for i in range(20):  # 20 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ —Ñ—Ä–∞–∑—É
            output_file = os.path.join(output_dir, f"neg_{file_counter:04d}.wav")
            tasks.append((phrase, output_file, voices))
            file_counter += 1
    
    print(f"üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {len(tasks)}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ CPU —è–¥—Ä–∞
    num_cores = multiprocessing.cpu_count()
    print(f"üíª –ò—Å–ø–æ–ª—å–∑—É–µ–º {num_cores} —è–¥–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    success_count = 0
    with ProcessPoolExecutor(max_workers=num_cores) as executor:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        future_to_task = {executor.submit(generate_phrase, task): task for task in tasks}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        with tqdm(total=len(tasks), desc="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è TTS –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö") as pbar:
            for future in as_completed(future_to_task):
                task = future_to_task[future]
                try:
                    result = future.result()
                    if result:
                        success_count += 1
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {task[1]}: {e}")
                pbar.update(1)
    
    print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {success_count}/{len(tasks)} —Ñ–∞–π–ª–æ–≤")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_dir}")
    
    return output_dir

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ì–ï–ù–ï–†–ê–¶–ò–Ø TTS –ù–ï–ì–ê–¢–ò–í–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Piper –º–æ–¥–µ–ª–µ–π - –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–£–¢–ò –ò–ó XML –ë–ï–ó –•–ê–†–î–ö–û–î–ê
    piper_models_dir = f"{paths.DATA_ROOT}/piper_models"
    if not os.path.exists(piper_models_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å Piper –º–æ–¥–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {piper_models_dir}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Piper TTS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–µ–π
    model_files = [f for f in os.listdir(piper_models_dir) if f.endswith('.onnx')]
    if not model_files:
        print(f"‚ùå Piper –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {piper_models_dir}")
        print("üí° –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä—É—Å—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ Piper TTS")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(model_files)} Piper –º–æ–¥–µ–ª–µ–π")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    output_dir = generate_negatives_tts()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if os.path.exists(output_dir):
        files_count = len([f for f in os.listdir(output_dir) if f.endswith('.wav')])
        print(f"üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_count}")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {output_dir} –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
        return False

if __name__ == "__main__":
    main()