#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –¥–ª—è TTS –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ microWakeWord
sys.path.insert(0, './microwakeword')

# –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ê–Ø –õ–ò–ù–ö–û–í–ö–ê –ü–£–¢–ï–ô –ò–ó XML –ë–ï–ó –•–ê–†–î–ö–û–î–ê
from src.utils.path_manager import paths

def generate_negatives_spectrograms():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è TTS –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üöÄ –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ü–ï–ö–¢–†–û–ì–†–ê–ú–ú –î–õ–Ø TTS –ù–ï–ì–ê–¢–ò–í–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º - –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–£–¢–ò –ò–ó XML –ë–ï–ó –•–ê–†–î–ö–û–î–ê
    input_dir = paths.NEGATIVES_TTS
    output_dir = paths.FEATURES_NEGATIVES
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not os.path.exists(input_dir):
        print(f"‚ùå –í—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {input_dir}")
        return False
    
    input_files = [f for f in os.listdir(input_dir) if f.endswith('.wav')]
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(input_files)} TTS –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    if len(input_files) == 0:
        print("‚ùå –ù–µ—Ç WAV —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    os.makedirs(os.path.join(output_dir, "training", "wakeword_mmap"), exist_ok=True)
    os.makedirs(os.path.join(output_dir, "validation", "wakeword_mmap"), exist_ok=True)
    os.makedirs(os.path.join(output_dir, "testing", "wakeword_mmap"), exist_ok=True)
    
    try:
        # –ò–º–ø–æ—Ä—Ç—ã microWakeWord
        from microwakeword.audio.clips import Clips
        from microwakeword.audio.augmentation import Augmentation
        from microwakeword.audio.spectrograms import SpectrogramGeneration
        from mmap_ninja.ragged import RaggedMmap
        
        print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ microWakeWord –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Clips –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        clips = Clips(
            input_directory=input_dir,
            file_pattern='*.wav',
            max_clip_duration_s=1.5,
            remove_silence=False,
            random_split_seed=10,
            split_count=0.1,  # 10% –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é/—Ç–µ—Å—Ç
        )
        
        print(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Clips: {input_dir}")
        
        # –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        augmentation = Augmentation(
            augmentation_duration_s=1.5,
            augmentation_probabilities={
                "SevenBandParametricEQ": 0.1,
                "TanhDistortion": 0.1,
                "PitchShift": 0.1,
                "BandStopFilter": 0.1,
                "AddColorNoise": 0.1,
                "Gain": 1.0,
            },
            min_jitter_s=0.195,
            max_jitter_s=0.205,
        )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º
        spectrograms = SpectrogramGeneration(
            clips=clips,
            augmenter=augmentation,
            slide_frames=1,
            step_ms=4.42,
        )
        
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö splits
        splits = ["train", "validation", "test"]
        
        for split in splits:
            print(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {split} –¥–∞–Ω–Ω—ã—Ö...")
            
            output_path = os.path.join(output_dir, split, "wakeword_mmap")
            
            # –°–æ–∑–¥–∞–µ–º RaggedMmap –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            RaggedMmap.from_generator(
                out_dir=output_path,
                sample_generator=spectrograms.spectrogram_generator(split=split, repeat=1),
                batch_size=1000,
                verbose=True,
            )
            
            print(f"‚úÖ {split} –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}")
        
        print("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = generate_negatives_spectrograms()
    
    if success:
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–£–¢–ò –ò–ó XML –ë–ï–ó –•–ê–†–î–ö–û–î–ê
        output_dir = paths.FEATURES_NEGATIVES
        for split in ["training", "validation", "testing"]:
            split_dir = os.path.join(output_dir, split, "wakeword_mmap")
            if os.path.exists(split_dir):
                files = os.listdir(split_dir)
                print(f"üìä {split}: {len(files)} —Ñ–∞–π–ª–æ–≤")
            else:
                print(f"‚ùå {split}: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
    else:
        print("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
    
    return success

if __name__ == "__main__":
    main()