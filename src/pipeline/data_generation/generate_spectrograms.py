#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –¥–ª—è microWakeWord
–≠—Ç–∞–ø 1: –¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –±–µ–∑ –æ–±—É—á–µ–Ω–∏—è
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
sys.path.insert(0, './microwakeword')

# –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ê–Ø –õ–ò–ù–ö–û–í–ö–ê –ü–£–¢–ï–ô –ò–ó XML –ë–ï–ó –•–ê–†–î–ö–û–î–ê
from src.utils.path_manager import paths

def create_data_in_their_format():
    """–°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç –∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫–∞"""
    
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ microWakeWord...")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π - –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–£–¢–ò –ò–ó XML –ë–ï–ó –•–ê–†–î–ö–û–î–ê
    os.makedirs(os.path.join(paths.FEATURES_POSITIVES, "training"), exist_ok=True)
    os.makedirs(os.path.join(paths.FEATURES_POSITIVES, "validation"), exist_ok=True)
    os.makedirs(os.path.join(paths.FEATURES_POSITIVES, "testing"), exist_ok=True)
    os.makedirs(os.path.join(paths.FEATURES_POSITIVES, "training_ambient"), exist_ok=True)
    os.makedirs(os.path.join(paths.FEATURES_POSITIVES, "testing_ambient"), exist_ok=True)
    os.makedirs(os.path.join(paths.FEATURES_POSITIVES, "validation_ambient"), exist_ok=True)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–£–¢–ò –ò–ó XML –ë–ï–ó –•–ê–†–î–ö–û–î–ê
    positives_dir = paths.POSITIVES_RAW
    negatives_dir = paths.NEGATIVES_PROCESSED  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    if os.path.exists(positives_dir):
        pos_files = len([f for f in os.listdir(positives_dir) if f.endswith('.wav')])
        print(f"üìä –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï - –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ: {pos_files} —Ñ–∞–π–ª–æ–≤")
    else:
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {positives_dir}")
        return False
        
    if os.path.exists(negatives_dir):
        neg_files = len([f for f in os.listdir(negatives_dir) if f.endswith('.wav')])
        print(f"üìä –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï - –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ: {neg_files} —Ñ–∞–π–ª–æ–≤")
    else:
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {negatives_dir}")
        return False
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    from microwakeword.audio.clips import Clips
    from microwakeword.audio.augmentation import Augmentation
    from microwakeword.audio.spectrograms import SpectrogramGeneration
    from microwakeword.data import RaggedMmap
    
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ microWakeWord...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞ –ª–µ—Ç—É
    positives_clips = Clips(
        input_directory=positives_dir,
        file_pattern='*.wav',
        max_clip_duration_s=1.5,  # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å —Å–µ–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        remove_silence=False,
        random_split_seed=10,
        split_count=0.1,  # 10% –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é/—Ç–µ—Å—Ç
    )
    
    print(f"üìä –ù–ê–°–¢–†–û–ô–ö–ê CLIPS - –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑: {positives_dir}")
    print(f"üìä –ù–ê–°–¢–†–û–ô–ö–ê CLIPS - Split count: 0.1 (10% –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é/—Ç–µ—Å—Ç)")
    
    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    positives_augmentation = Augmentation(
        augmentation_duration_s=1.5,  # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç max_clip_duration_s
        augmentation_probabilities={
            "SevenBandParametricEQ": 0.1,
            "TanhDistortion": 0.1,
            "PitchShift": 0.1,
            "BandStopFilter": 0.1,
            "AddColorNoise": 0.1,
            "Gain": 1.0,
        },
        min_jitter_s=0.195,
        max_jitter_s=0.205,
    )
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    positives_spectrograms = SpectrogramGeneration(
        clips=positives_clips,
        augmenter=positives_augmentation,
        slide_frames=1,  # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        step_ms=4.42,  # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç microWakeWord
    )
    
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...")
    print("üìä –†–ê–ó–î–ï–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•:")
    print(f"   - –í—Å–µ–≥–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {pos_files}")
    print(f"   - Split count: 0.1 (10% –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é/—Ç–µ—Å—Ç)")
    print(f"   - –û–∂–∏–¥–∞–µ–º–æ–µ –æ–±—É—á–µ–Ω–∏–µ: ~{int(pos_files * 0.9)} —Ñ–∞–π–ª–æ–≤")
    print(f"   - –û–∂–∏–¥–∞–µ–º–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: ~{int(pos_files * 0.05)} —Ñ–∞–π–ª–æ–≤")
    print(f"   - –û–∂–∏–¥–∞–µ–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ~{int(pos_files * 0.05)} —Ñ–∞–π–ª–æ–≤")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã - –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–£–¢–ò –ò–ó XML –ë–ï–ó –•–ê–†–î–ö–û–î–ê
    RaggedMmap.from_generator(
        out_dir=os.path.join(paths.FEATURES_POSITIVES, "training", "wakeword_mmap"),
        sample_generator=positives_spectrograms.spectrogram_generator(split="train", repeat=1),
        batch_size=1000,
        verbose=True,
    )
    
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
    RaggedMmap.from_generator(
        out_dir=os.path.join(paths.FEATURES_POSITIVES, "validation", "wakeword_mmap"),
        sample_generator=positives_spectrograms.spectrogram_generator(split="validation", repeat=1),
        batch_size=1000,
        verbose=True,
    )
    
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    RaggedMmap.from_generator(
        out_dir=os.path.join(paths.FEATURES_POSITIVES, "testing", "wakeword_mmap"),
        sample_generator=positives_spectrograms.spectrogram_generator(split="test", repeat=1),
        batch_size=1000,
        verbose=True,
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("üìä –ù–ê–°–¢–†–û–ô–ö–ê –ù–ï–ì–ê–¢–ò–í–ù–´–• –î–ê–ù–ù–´–•:")
    print(f"   - –ò—Å—Ç–æ—á–Ω–∏–∫: {negatives_dir}")
    print(f"   - Slide frames: 1 (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    negatives_clips = Clips(
        input_directory=negatives_dir,
        file_pattern='*.wav',
        max_clip_duration_s=1.5,  # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å —Å–µ–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        remove_silence=False,
        random_split_seed=10,
        split_count=0.1,
    )
    
    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    negatives_augmentation = Augmentation(
        augmentation_duration_s=1.5,  # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç max_clip_duration_s
        augmentation_probabilities={
            "SevenBandParametricEQ": 0.1,
            "TanhDistortion": 0.1,
            "PitchShift": 0.1,
            "BandStopFilter": 0.1,
            "AddColorNoise": 0.1,
            "Gain": 1.0,
        },
        min_jitter_s=0.195,
        max_jitter_s=0.205,
    )
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    negatives_spectrograms = SpectrogramGeneration(
        clips=negatives_clips,
        augmenter=negatives_augmentation,
        slide_frames=1,  # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        step_ms=4.42,  # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç microWakeWord
    )
    
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º...")
    print("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {neg_files} —Ñ–∞–π–ª–æ–≤ √ó 1 = {neg_files} –∏—Ç–µ—Ä–∞—Ü–∏–π")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–£–¢–ò –ò–ó XML –ë–ï–ó –•–ê–†–î–ö–û–î–ê
    os.makedirs(os.path.join(paths.FEATURES_NEGATIVES, "training"), exist_ok=True)
    os.makedirs(os.path.join(paths.FEATURES_NEGATIVES, "validation"), exist_ok=True)
    os.makedirs(os.path.join(paths.FEATURES_NEGATIVES, "testing"), exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã - –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–£–¢–ò –ò–ó XML –ë–ï–ó –•–ê–†–î–ö–û–î–ê
    RaggedMmap.from_generator(
        out_dir=os.path.join(paths.FEATURES_NEGATIVES, "training", "wakeword_mmap"),
        sample_generator=negatives_spectrograms.spectrogram_generator(split="train", repeat=1),
        batch_size=1000,
        verbose=True,
    )
    
    RaggedMmap.from_generator(
        out_dir=os.path.join(paths.FEATURES_NEGATIVES, "validation", "wakeword_mmap"),
        sample_generator=negatives_spectrograms.spectrogram_generator(split="validation", repeat=1),
        batch_size=1000,
        verbose=True,
    )
    
    RaggedMmap.from_generator(
        out_dir=os.path.join(paths.FEATURES_NEGATIVES, "testing", "wakeword_mmap"),
        sample_generator=negatives_spectrograms.spectrogram_generator(split="test", repeat=1),
        batch_size=1000,
        verbose=True,
    )
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ambient –¥–∞–Ω–Ω—ã—Ö
    print("üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø AMBIENT –î–ê–ù–ù–´–•:")
    print("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ambient –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ambient –¥–∞–Ω–Ω—ã—Ö
    ambient_dir = paths.BACKGROUND  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
    if os.path.exists(ambient_dir):
        ambient_files = len([f for f in os.listdir(ambient_dir) if f.endswith('.wav')])
        print(f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ambient –¥–∞–Ω–Ω—ã–µ...")
        print(f"   - –ù–∞–π–¥–µ–Ω–æ {ambient_files} ambient —Ñ–∞–π–ª–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º clips –¥–ª—è ambient –¥–∞–Ω–Ω—ã—Ö
        ambient_clips = Clips(
            input_directory=ambient_dir,
            file_pattern='*.wav',
            max_clip_duration_s=None,
            remove_silence=False,
            random_split_seed=10,
            split_count=0.1,
        )
        
        ambient_spectrograms = SpectrogramGeneration(
            clips=ambient_clips,
            augmenter=None,  # –ë–µ–∑ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π –¥–ª—è ambient –¥–∞–Ω–Ω—ã—Ö
            slide_frames=1,
            step_ms=10,
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è ambient –¥–∞–Ω–Ω—ã—Ö
        os.makedirs(os.path.join(data_dir, "generated_features_ambient", "training_ambient"), exist_ok=True)
        os.makedirs(os.path.join(data_dir, "generated_features_ambient", "testing_ambient"), exist_ok=True)
        os.makedirs(os.path.join(data_dir, "generated_features_ambient", "validation_ambient"), exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ambient –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        RaggedMmap.from_generator(
            out_dir=os.path.join(data_dir, "generated_features_ambient", "training_ambient", "wakeword_mmap"),
            sample_generator=ambient_spectrograms.spectrogram_generator(split="train", repeat=1),
            batch_size=50,
            verbose=True,
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ambient –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        RaggedMmap.from_generator(
            out_dir=os.path.join(data_dir, "generated_features_ambient", "testing_ambient", "wakeword_mmap"),
            sample_generator=ambient_spectrograms.spectrogram_generator(split="test", repeat=1),
            batch_size=50,
            verbose=True,
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ambient –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        RaggedMmap.from_generator(
            out_dir=os.path.join(data_dir, "generated_features_ambient", "validation_ambient", "wakeword_mmap"),
            sample_generator=ambient_spectrograms.spectrogram_generator(split="validation", repeat=1),
            batch_size=50,
            verbose=True,
        )
        
        print(f"‚úÖ Ambient –¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    else:
        print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ambient –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {ambient_dir}")
        print("   –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ ambient –¥–∞–Ω–Ω—ã—Ö...")
    
    print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º"""
    
    print("üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –¥–ª—è microWakeWord")
    
    # –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö - –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–£–¢–ò –ò–ó XML –ë–ï–ó –•–ê–†–î–ö–û–î–ê
    data_dir = paths.DATA_ROOT
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö - –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–£–¢–ò –ò–ó XML –ë–ï–ó –•–ê–†–î–ö–û–î–ê
    positives_dir = paths.POSITIVES_RAW
    negatives_dir = paths.NEGATIVES_PROCESSED  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    print(f"\nüìä –ü–†–û–í–ï–†–ö–ê –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•:")
    
    if os.path.exists(positives_dir):
        pos_files = len([f for f in os.listdir(positives_dir) if f.endswith('.wav')])
        print(f"   ‚úÖ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {pos_files} —Ñ–∞–π–ª–æ–≤ –≤ {positives_dir}")
    else:
        print(f"   ‚ùå –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {positives_dir}")
        return False
    
    if os.path.exists(negatives_dir):
        neg_files = len([f for f in os.listdir(negatives_dir) if f.endswith('.wav')])
        print(f"   ‚úÖ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {neg_files} —Ñ–∞–π–ª–æ–≤ –≤ {negatives_dir}")
    else:
        print(f"   ‚ùå –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {negatives_dir}")
        return False
    
    print(f"   üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –∫ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º: {neg_files/pos_files:.1f}:1")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∏—Ö —Ñ–æ—Ä–º–∞—Ç–µ
        if create_data_in_their_format():
            print("\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("üìÅ –°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:")
            print(f"  - {paths.FEATURES_POSITIVES}/")
            print(f"  - {paths.FEATURES_NEGATIVES}/")
            print(f"  - {paths.DATA_ROOT}/features_background/")
            print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏!")
            return True
        else:
            print("\n‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    main()