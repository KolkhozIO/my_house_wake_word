#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ Piper TTS
–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
"""

import os
import numpy as np
import soundfile as sf
from pathlib import Path
import multiprocessing as mp
from tqdm import tqdm

def generate_simple_audio(text, sample_rate=16000, duration=0.5):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –∞—É–¥–∏–æ —Å —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–º —Ç–æ–Ω–æ–º"""
    # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π —Ç–æ–Ω —Å —á–∞—Å—Ç–æ—Ç–æ–π, –∑–∞–≤–∏—Å—è—â–µ–π –æ—Ç —Ç–µ–∫—Å—Ç–∞
    freq = 440 + hash(text) % 200  # –ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç 440 –¥–æ 640 –ì—Ü
    t = np.linspace(0, duration, int(sample_rate * duration))
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–Ω
    audio = np.sin(2 * np.pi * freq * t)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    noise = np.random.normal(0, 0.1, len(audio))
    audio = audio + noise
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    audio = audio / np.max(np.abs(audio)) * 0.8
    
    return audio

def generate_file(args):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª"""
    text, output_path, sample_rate = args
    
    try:
        audio = generate_simple_audio(text, sample_rate)
        sf.write(output_path, audio, sample_rate)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {output_path}: {e}")
        return False

def main():
    print("üöÄ –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    data_dir = "/home/microWakeWord_data"
    sample_rate = 16000
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    temp_positives = os.path.join(data_dir, "positives_both_temp")
    temp_negatives = os.path.join(data_dir, "negatives_both_temp")
    final_positives = os.path.join(data_dir, "positives_both")
    final_negatives = os.path.join(data_dir, "negatives_both")
    
    for dir_path in [temp_positives, temp_negatives, final_positives, final_negatives]:
        os.makedirs(dir_path, exist_ok=True)
    
    # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    positive_phrases = [
        "–º–∏–ª—ã–π –¥–æ–º", "–º–∏–ª—ã–π –¥–æ–º.", "–º–∏–ª—ã–π –¥–æ–º!", "–º–∏–ª—ã–π –¥–æ–º?",
        "–ª—é–±–∏–º—ã–π –¥–æ–º", "–ª—é–±–∏–º—ã–π –¥–æ–º.", "–ª—é–±–∏–º—ã–π –¥–æ–º!", "–ª—é–±–∏–º—ã–π –¥–æ–º?",
        "–Ω—É –º–∏–ª—ã–π –¥–æ–º", "–≤–æ—Ç –º–∏–ª—ã–π –¥–æ–º", "–¥–∞ –º–∏–ª—ã–π –¥–æ–º", "—ç—Ç–æ –º–∏–ª—ã–π –¥–æ–º",
        "–Ω—É –ª—é–±–∏–º—ã–π –¥–æ–º", "–≤–æ—Ç –ª—é–±–∏–º—ã–π –¥–æ–º", "–¥–∞ –ª—é–±–∏–º—ã–π –¥–æ–º", "—ç—Ç–æ –ª—é–±–∏–º—ã–π –¥–æ–º"
    ]
    
    # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    negative_phrases = [
        "–º–∏–ª—ã–π —Ç–æ–º", "–º–∏–ª—ã–π –¥–æ–Ω", "–º–∏–ª—ã–π –¥–æ–º–∏–∫", "–º–∏–ª—ã–π –¥–æ–º–æ—Ñ–æ–Ω",
        "–ª—é–±–∏–º—ã–π —Ç–æ–º", "–ª—é–±–∏–º—ã–π –¥–æ–Ω", "–ª—é–±–∏–º—ã–π –¥–æ–º–∏–∫", "–ª—é–±–∏–º—ã–π –¥–æ–º–æ—Ñ–æ–Ω",
        "–º–æ–π –¥–æ–º", "–º–æ–π –¥–æ–º.", "–º–æ–π –¥–æ–º!", "–º–æ–π –¥–æ–º?",
        "—Ç–≤–æ–π –¥–æ–º", "–µ–≥–æ –¥–æ–º", "–µ—ë –¥–æ–º", "–Ω–∞—à –¥–æ–º",
        "–¥–æ–º –º–∏–ª—ã–π", "–¥–æ–º –ª—é–±–∏–º—ã–π", "–¥–æ–º –∫—Ä–∞—Å–∏–≤—ã–π", "–¥–æ–º –±–æ–ª—å—à–æ–π",
        "my home", "my dome", "my house", "my room",
        "hello world", "good morning", "good evening", "good night",
        "–ø—Ä–∏–≤–µ—Ç –º–∏—Ä", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏",
        "–∫–∞–∫ –¥–µ–ª–∞", "—á—Ç–æ –¥–µ–ª–∞–µ—à—å", "–≥–¥–µ —Ç—ã", "–∫—Ç–æ —Ç—ã",
        "–≤—Ä–µ–º—è", "–ø–æ–≥–æ–¥–∞", "–Ω–æ–≤–æ—Å—Ç–∏", "–º—É–∑—ã–∫–∞"
    ]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    print("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    positive_tasks = []
    for i in range(3200):  # 3200 –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        phrase = positive_phrases[i % len(positive_phrases)]
        filename = f"{i:03d}_{i % 20}.wav"
        output_path = os.path.join(temp_positives, filename)
        positive_tasks.append((phrase, output_path, sample_rate))
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    print("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    negative_tasks = []
    for i in range(690):  # 690 –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        phrase = negative_phrases[i % len(negative_phrases)]
        filename = f"{i:03d}_{i % 20}.wav"
        output_path = os.path.join(temp_negatives, filename)
        negative_tasks.append((phrase, output_path, sample_rate))
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —è–¥—Ä–∞
    num_cores = mp.cpu_count()
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º {num_cores} —è–¥–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {len(positive_tasks + negative_tasks)} —Ñ–∞–π–ª–æ–≤...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    all_tasks = positive_tasks + negative_tasks
    
    with mp.Pool(num_cores) as pool:
        results = list(tqdm(
            pool.imap(generate_file, all_tasks),
            total=len(all_tasks),
            desc="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ"
        ))
    
    success_count = sum(results)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {success_count}/{len(all_tasks)} —Ñ–∞–π–ª–æ–≤")
    
    # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    print("üîÑ –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if os.path.exists(final_positives):
        import shutil
        shutil.rmtree(final_positives, ignore_errors=True)
    if os.path.exists(final_negatives):
        import shutil
        shutil.rmtree(final_negatives, ignore_errors=True)
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.rename(temp_positives, final_positives)
    os.rename(temp_negatives, final_negatives)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    pos_count = len([f for f in os.listdir(final_positives) if f.endswith('.wav')])
    neg_count = len([f for f in os.listdir(final_negatives) if f.endswith('.wav')])
    
    print(f"üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {pos_count}")
    print(f"üìä –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {neg_count}")
    print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: {pos_count + neg_count}")

if __name__ == "__main__":
    main()