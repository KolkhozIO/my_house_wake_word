#!/usr/bin/env python3
"""
–°–º–µ—à–∏–≤–∞–Ω–∏–µ TTS –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∞–ª—å–Ω—ã–º —à—É–º–æ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
"""

import os
import sys
import argparse
import logging
import random
import numpy as np
import librosa
import soundfile as sf
from pathlib import Path
from concurrent.futures import ProcessPoolExecutor, as_completed
from multiprocessing import cpu_count
from tqdm import tqdm

# –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ê–Ø –õ–ò–ù–ö–û–í–ö–ê –ü–£–¢–ï–ô –ò–ó XML –ë–ï–ó –•–ê–†–î–ö–û–î–ê
from src.utils.path_manager import paths

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–º–µ—à–∏–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
MIXING_VARIANTS = {
    "conservative": {
        "noise_ratio": 0.05,      # 5% —à—É–º–∞, 95% TTS
        "snr_range": (20, 30),    # –≤—ã—Å–æ–∫–∏–π SNR
        "name": "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π"
    },
    "moderate": {
        "noise_ratio": 0.1,       # 10% —à—É–º–∞, 90% TTS
        "snr_range": (15, 25),    # —Å—Ä–µ–¥–Ω–∏–π SNR
        "name": "–£–º–µ—Ä–µ–Ω–Ω—ã–π"
    },
    "aggressive": {
        "noise_ratio": 0.2,       # 20% —à—É–º–∞, 80% TTS
        "snr_range": (10, 20),    # –Ω–∏–∑–∫–∏–π SNR
        "name": "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π"
    },
    "extreme": {
        "noise_ratio": 0.3,       # 30% —à—É–º–∞, 70% TTS
        "snr_range": (5, 15),     # –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π SNR
        "name": "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π"
    }
}

# –ò—Å—Ç–æ—á–Ω–∏–∫–∏ TTS –¥–∞–Ω–Ω—ã—Ö - –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ main() —Å —É—á–µ—Ç–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞
TTS_SOURCES_TEMPLATE = {
    "positives": {
        "path": paths.POSITIVES_RAW,
        "output_template": f"{paths.DATA_ROOT}/positives_with_noise_{{variant}}/",
        "description": "TTS –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    },
    "negatives": {
        "path": paths.NEGATIVES_TTS,
        "output_template": f"{paths.DATA_ROOT}/negatives_with_noise_{{variant}}/",
        "description": "TTS –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    },
    "hard_negatives": {
        "path": "/home/microWakeWord_data/hard_negatives/",
        "output_template": f"{paths.DATA_ROOT}/hard_negatives_with_noise_{{variant}}/",
        "description": "Hard negatives –¥–∞–Ω–Ω—ã–µ"
    },
    "negatives_tts": {
        "path": paths.NEGATIVES_TTS,
        "output_template": f"{paths.DATA_ROOT}/negatives_tts_with_noise_{{variant}}/",
        "description": "TTS –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    }
}

# –ò—Å—Ç–æ—á–Ω–∏–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —à—É–º–∞ - –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–£–¢–ò –ò–ó XML –ë–ï–ó –•–ê–†–î–ö–û–î–ê
NOISE_SOURCE = paths.NEGATIVES_RAW

def load_audio(file_path, sr=16000):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª"""
    try:
        audio, _ = librosa.load(file_path, sr=sr, mono=True)
        return audio
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
        return None

def save_audio(audio, file_path, sr=16000):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª"""
    try:
        sf.write(file_path, audio, sr)
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {file_path}: {e}")
        return False

def calculate_snr(signal, noise):
    """–í—ã—á–∏—Å–ª—è–µ—Ç Signal-to-Noise Ratio"""
    signal_power = np.mean(signal ** 2)
    noise_power = np.mean(noise ** 2)
    if noise_power == 0:
        return float('inf')
    snr_db = 10 * np.log10(signal_power / noise_power)
    return snr_db

def mix_audio_with_noise(tts_audio, noise_audio, variant_params):
    """–°–º–µ—à–∏–≤–∞–µ—Ç TTS –∞—É–¥–∏–æ —Å —à—É–º–æ–º"""
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞—É–¥–∏–æ
        tts_audio = librosa.util.normalize(tts_audio)
        noise_audio = librosa.util.normalize(noise_audio)
        
        # –û–±—Ä–µ–∑–∞–µ–º —à—É–º –¥–æ –¥–ª–∏–Ω—ã TTS –∞—É–¥–∏–æ
        if len(noise_audio) > len(tts_audio):
            start_idx = random.randint(0, len(noise_audio) - len(tts_audio))
            noise_audio = noise_audio[start_idx:start_idx + len(tts_audio)]
        elif len(noise_audio) < len(tts_audio):
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º —à—É–º –µ—Å–ª–∏ –æ–Ω –∫–æ—Ä–æ—á–µ
            repeats = (len(tts_audio) // len(noise_audio)) + 1
            noise_audio = np.tile(noise_audio, repeats)[:len(tts_audio)]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–º–µ—à–∏–≤–∞–Ω–∏—è
        noise_ratio = variant_params["noise_ratio"]
        snr_min, snr_max = variant_params["snr_range"]
        target_snr = random.uniform(snr_min, snr_max)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–æ—â–Ω–æ—Å—Ç—å —à—É–º–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ SNR
        signal_power = np.mean(tts_audio ** 2)
        target_noise_power = signal_power / (10 ** (target_snr / 10))
        current_noise_power = np.mean(noise_audio ** 2)
        
        if current_noise_power > 0:
            noise_scale = np.sqrt(target_noise_power / current_noise_power)
            noise_audio = noise_audio * noise_scale
        
        # –°–º–µ—à–∏–≤–∞–µ–º –∞—É–¥–∏–æ
        mixed_audio = (1 - noise_ratio) * tts_audio + noise_ratio * noise_audio
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        mixed_audio = librosa.util.normalize(mixed_audio)
        
        return mixed_audio
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–º–µ—à–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ: {e}")
        return None

def process_single_file(args):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª"""
    tts_file, noise_files, variant_params, output_dir = args
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º TTS –∞—É–¥–∏–æ
        tts_audio = load_audio(tts_file)
        if tts_audio is None:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å TTS —Ñ–∞–π–ª: {tts_file}"
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–π–ª —à—É–º–∞
        noise_file = random.choice(noise_files)
        noise_audio = load_audio(noise_file)
        if noise_audio is None:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —à—É–º–∞: {noise_file}"
        
        # –°–º–µ—à–∏–≤–∞–µ–º –∞—É–¥–∏–æ
        mixed_audio = mix_audio_with_noise(tts_audio, noise_audio, variant_params)
        if mixed_audio is None:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ—à–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è: {tts_file}"
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å
        tts_path = Path(tts_file)
        output_file = Path(output_dir) / tts_path.name
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if save_audio(mixed_audio, output_file):
            return f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {tts_path.name}"
        else:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {tts_path.name}"
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {tts_file}: {e}"

def get_noise_files():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —à—É–º–∞"""
    noise_files = []
    if os.path.exists(NOISE_SOURCE):
        for file_path in Path(NOISE_SOURCE).glob("*.wav"):
            noise_files.append(str(file_path))
    
    if not noise_files:
        logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —à—É–º–∞ –≤ {NOISE_SOURCE}")
        return None
    
    logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(noise_files)} —Ñ–∞–π–ª–æ–≤ —à—É–º–∞")
    return noise_files

def process_tts_source(source_name, source_info, variant_params, noise_files):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ TTS –¥–∞–Ω–Ω—ã—Ö"""
    logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {source_info['description']}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists(source_info["path"]):
        logger.warning(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {source_info['path']}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.makedirs(source_info["output"], exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ TTS —Ñ–∞–π–ª–æ–≤
    tts_files = list(Path(source_info["path"]).glob("*.wav"))
    if not tts_files:
        logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã WAV —Ñ–∞–π–ª—ã –≤ {source_info['path']}")
        return False
    
    logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(tts_files)} —Ñ–∞–π–ª–æ–≤...")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    tasks = []
    for tts_file in tts_files:
        tasks.append((str(tts_file), noise_files, variant_params, source_info["output"]))
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    max_workers = min(cpu_count(), 8)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    processed_count = 0
    error_count = 0
    
    with ProcessPoolExecutor(max_workers=max_workers) as executor:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
        futures = [executor.submit(process_single_file, task) for task in tasks]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        with tqdm(total=len(tasks), desc=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {source_name}") as pbar:
            for future in as_completed(futures):
                result = future.result()
                if result.startswith("‚úÖ"):
                    processed_count += 1
                else:
                    error_count += 1
                    logger.error(result)
                pbar.update(1)
    
    logger.info(f"‚úÖ {source_name}: {processed_count} —É—Å–ø–µ—à–Ω–æ, {error_count} –æ—à–∏–±–æ–∫")
    return processed_count > 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–°–º–µ—à–∏–≤–∞–Ω–∏–µ TTS –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∞–ª—å–Ω—ã–º —à—É–º–æ–º")
    parser.add_argument("--variant", choices=list(MIXING_VARIANTS.keys()), 
                       default="moderate", help="–í–∞—Ä–∏–∞–Ω—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–º–µ—à–∏–≤–∞–Ω–∏—è")
    parser.add_argument("--source", choices=list(TTS_SOURCES.keys()), 
                       help="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
    parser.add_argument("--test", action="store_true", 
                       help="–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ 10 —Ñ–∞–π–ª–æ–≤)")
    
    args = parser.parse_args()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—Ä–∏–∞–Ω—Ç–∞
    variant_params = MIXING_VARIANTS[args.variant]
    variant_name = variant_params["name"]
    
    logger.info(f"üéØ –°–ú–ï–®–ò–í–ê–ù–ò–ï TTS –î–ê–ù–ù–´–• –° –†–ï–ê–õ–¨–ù–´–ú –®–£–ú–û–ú")
    logger.info(f"üìä –í–∞—Ä–∏–∞–Ω—Ç: {variant_name}")
    logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {variant_params}")
    
    # –°–æ–∑–¥–∞–µ–º TTS_SOURCES —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–∞–ø–æ–∫ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
    TTS_SOURCES = {}
    for source_name, source_info in TTS_SOURCES_TEMPLATE.items():
        TTS_SOURCES[source_name] = {
            "path": source_info["path"],
            "output": source_info["output_template"].format(variant=args.variant),
            "description": source_info["description"]
        }
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã —à—É–º–∞
    noise_files = get_noise_files()
    if not noise_files:
        return 1
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if args.source:
        sources_to_process = {args.source: TTS_SOURCES[args.source]}
    else:
        sources_to_process = TTS_SOURCES
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
    total_processed = 0
    total_errors = 0
    
    for source_name, source_info in sources_to_process.items():
        logger.info(f"\nüîÑ –û–ë–†–ê–ë–û–¢–ö–ê –ò–°–¢–û–ß–ù–ò–ö–ê: {source_name}")
        logger.info(f"üìÅ –í—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {source_info['path']}")
        logger.info(f"üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {source_info['output']}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        if args.test:
            logger.info("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤")
            # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            original_path = source_info["path"]
            test_files = list(Path(original_path).glob("*.wav"))[:10]
            if test_files:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Ñ–∞–π–ª–æ–≤
                test_dir = f"/tmp/test_{source_name}"
                os.makedirs(test_dir, exist_ok=True)
                for test_file in test_files:
                    import shutil
                    shutil.copy2(test_file, test_dir)
                source_info["path"] = test_dir
        
        success = process_tts_source(source_name, source_info, variant_params, noise_files)
        
        if success:
            total_processed += 1
        else:
            total_errors += 1
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info(f"\nüéâ –°–ú–ï–®–ò–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    logger.info(f"üìä –í–∞—Ä–∏–∞–Ω—Ç: {variant_name}")
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {total_processed}")
    logger.info(f"‚ùå –û—à–∏–±–æ–∫: {total_errors}")
    
    if total_processed > 0:
        logger.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º '_with_noise'")
        logger.info(f"üöÄ –ì–æ—Ç–æ–≤–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞: –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –æ–±—É—á–µ–Ω–∏–µ")
        return 0
    else:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
        return 1

if __name__ == "__main__":
    sys.exit(main())