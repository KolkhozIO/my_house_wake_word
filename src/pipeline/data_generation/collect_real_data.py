#!/usr/bin/env python3
"""
–°–±–æ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö wake word –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
"""

import os
import sys
import logging
import subprocess
import numpy as np
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_real_data_structure():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        real_data_dir = "/home/microWakeWord_data/real_wake_word_data"
        os.makedirs(real_data_dir, exist_ok=True)
        
        # –ü–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        subdirs = [
            "positives_raw",      # –°—ã—Ä—ã–µ –∑–∞–ø–∏—Å–∏ wake word
            "positives_processed", # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            "noise_raw",      # –°—ã—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —Ñ–æ–Ω–∞
            "negatives_processed", # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Ñ–æ–Ω–∞
            "validation_set",     # –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä
            "test_set"           # –¢–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
        ]
        
        for subdir in subdirs:
            os.makedirs(os.path.join(real_data_dir, subdir), exist_ok=True)
        
        logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
        return real_data_dir
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return None

def generate_real_wake_word_instructions():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    instructions = """
# –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –°–ë–û–†–£ –†–ï–ê–õ–¨–ù–´–• WAKE WORD –î–ê–ù–ù–´–•

## üéØ –¶–ï–õ–¨
–°–æ–±—Ä–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Ñ—Ä–∞–∑—ã "–º–∏–ª—ã–π –¥–æ–º" / "–ª—é–±–∏–º—ã–π –¥–æ–º" –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.

## üìã –ß–¢–û –ù–£–ñ–ù–û –ó–ê–ü–ò–°–ê–¢–¨

### ‚úÖ –ü–û–ó–ò–¢–ò–í–ù–´–ï –î–ê–ù–ù–´–ï (Wake Word):
- –§—Ä–∞–∑–∞: "–º–∏–ª—ã–π –¥–æ–º" (—Ä–∞–∑–Ω—ã–µ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏)
- –§—Ä–∞–∑–∞: "–ª—é–±–∏–º—ã–π –¥–æ–º" (—Ä–∞–∑–Ω—ã–µ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏)
- –†–∞–∑–Ω—ã–µ –≥–æ–ª–æ—Å–∞ (–º—É–∂—Å–∫–∏–µ, –∂–µ–Ω—Å–∫–∏–µ, –¥–µ—Ç—Å–∫–∏–µ)
- –†–∞–∑–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–±–ª–∏–∑–∫–æ, –¥–∞–ª–µ–∫–æ)
- –†–∞–∑–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã (—Ç–∏—Ö–∞—è, —à—É–º–Ω–∞—è)
- –†–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫

### ‚ùå –ù–ï–ì–ê–¢–ò–í–ù–´–ï –î–ê–ù–ù–´–ï (–§–æ–Ω):
- –û–±—ã—á–Ω–∞—è —Ä–µ—á—å (–±–µ–∑ wake word)
- –ú—É–∑—ã–∫–∞, —Ç–µ–ª–µ–≤–∏–∑–æ—Ä, —Ä–∞–¥–∏–æ
- –®—É–º—ã –¥–æ–º–∞ (—Å—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞, –ø—ã–ª–µ—Å–æ—Å)
- –£–ª–∏—á–Ω—ã–µ —à—É–º—ã
- –†–∞–∑–≥–æ–≤–æ—Ä—ã –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π

## üìä –¢–†–ï–ë–£–ï–ú–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û

### –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- **–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ**: 1000 –∑–∞–ø–∏—Å–µ–π (–ø–æ 500 –∫–∞–∂–¥–æ–π —Ñ—Ä–∞–∑—ã)
- **–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ**: 10000 –∑–∞–ø–∏—Å–µ–π (—Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ñ–æ–Ω–∞)
- **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: 1-3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∑–∞–ø–∏—Å—å
- **–ö–∞—á–µ—Å—Ç–≤–æ**: 16kHz, –º–æ–Ω–æ, WAV

### –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
- **–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ**: 2000+ –∑–∞–ø–∏—Å–µ–π
- **–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ**: 20000+ –∑–∞–ø–∏—Å–µ–π
- **–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ**: 10+ —Ä–∞–∑–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
- **–£—Å–ª–æ–≤–∏—è**: 5+ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç/—É—Å–ª–æ–≤–∏–π

## üéôÔ∏è –ü–ê–†–ê–ú–ï–¢–†–´ –ó–ê–ü–ò–°–ò

### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- **Sample Rate**: 16000 Hz
- **Channels**: –ú–æ–Ω–æ (1 –∫–∞–Ω–∞–ª)
- **Format**: WAV, 16-bit
- **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: 1-5 —Å–µ–∫—É–Ω–¥
- **–ì—Ä–æ–º–∫–æ—Å—Ç—å**: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–µ—á—å (–Ω–µ –∫—Ä–∏–∫, –Ω–µ —à–µ–ø–æ—Ç)

### –£—Å–ª–æ–≤–∏—è –∑–∞–ø–∏—Å–∏:
- **–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ**: 1-3 –º–µ—Ç—Ä–∞ –æ—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
- **–û–∫—Ä—É–∂–µ–Ω–∏–µ**: –†–∞–∑–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –¥–æ–º–∞
- **–í—Ä–µ–º—è**: –†–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫
- **–§–æ–Ω**: –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ–º–∞—à–Ω–∏–π —à—É–º

## üìÅ –°–¢–†–£–ö–¢–£–†–ê –§–ê–ô–õ–û–í

### –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
```
/home/microWakeWord_data/real_wake_word_data/positives_raw/
‚îú‚îÄ‚îÄ miliy_dom_male_001.wav
‚îú‚îÄ‚îÄ miliy_dom_female_001.wav
‚îú‚îÄ‚îÄ lyubimiy_dom_male_001.wav
‚îú‚îÄ‚îÄ lyubimiy_dom_female_001.wav
‚îî‚îÄ‚îÄ ...
```

### –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
```
/home/microWakeWord_data/real_wake_word_data/noise_raw/
‚îú‚îÄ‚îÄ speech_001.wav
‚îú‚îÄ‚îÄ music_001.wav
‚îú‚îÄ‚îÄ tv_001.wav
‚îú‚îÄ‚îÄ noise_001.wav
‚îî‚îÄ‚îÄ ...
```

## üîß –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –î–õ–Ø –ó–ê–ü–ò–°–ò

### –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
- **Audacity**: –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è, –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è
- **QuickTime** (Mac): –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
- **Voice Recorder** (Windows): –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
- **–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è**: Voice Recorder, Audio Recorder

### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Audacity:
1. File ‚Üí New
2. Transport ‚Üí Record
3. File ‚Üí Export ‚Üí Export Audio
4. Format: WAV, Sample Rate: 16000 Hz, Channels: Mono

## üìù –ü–õ–ê–ù –°–ë–û–†–ê

### –ù–µ–¥–µ–ª—è 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
- [ ] –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Audacity
- [ ] –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω
- [ ] –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω—ã —Ñ–∞–π–ª–æ–≤
- [ ] –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑

### –ù–µ–¥–µ–ª—è 2: –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- [ ] –ó–∞–ø–∏—Å–∞—Ç—å 200 —Ñ—Ä–∞–∑ "–º–∏–ª—ã–π –¥–æ–º"
- [ ] –ó–∞–ø–∏—Å–∞—Ç—å 200 —Ñ—Ä–∞–∑ "–ª—é–±–∏–º—ã–π –¥–æ–º"
- [ ] –†–∞–∑–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –∏ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏
- [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π

### –ù–µ–¥–µ–ª—è 3: –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- [ ] –ó–∞–ø–∏—Å–∞—Ç—å 2000 —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
- [ ] –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —à—É–º–æ–≤
- [ ] –†–∞–∑–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
- [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ

### –ù–µ–¥–µ–ª—è 4: –û–±—Ä–∞–±–æ—Ç–∫–∞
- [ ] –û–±—Ä–µ–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –¥–æ 1-3 —Å–µ–∫—É–Ω–¥
- [ ] –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å
- [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ
- [ ] –†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ train/validation/test

## ‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ó–ê–ú–ï–ß–ê–ù–ò–Ø

### –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:
- **–ß–µ—Ç–∫–æ—Å—Ç—å**: –§—Ä–∞–∑—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–æ –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω—ã
- **–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å**: –ù–µ —á–∏—Ç–∞—Ç—å –ø–æ –±—É–º–∞–∂–∫–µ, –≥–æ–≤–æ—Ä–∏—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ
- **–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ**: –†–∞–∑–Ω—ã–µ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏, —Ç–µ–º–ø—ã, —ç–º–æ—Ü–∏–∏
- **–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å**: –£—Å–ª–æ–≤–∏—è –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏

### –ò–∑–±–µ–≥–∞—Ç—å:
- **–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å**: –ù–µ –≥–æ–≤–æ—Ä–∏—Ç—å —Å–ª–∏—à–∫–æ–º —á–µ—Ç–∫–æ/–º–µ–¥–ª–µ–Ω–Ω–æ
- **–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è**: –ù–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏
- **–®—É–º—ã**: –ò–∑–±–µ–≥–∞—Ç—å —Å–∏–ª—å–Ω—ã—Ö —Ñ–æ–Ω–æ–≤—ã—Ö —à—É–º–æ–≤
- **–ò—Å–∫–∞–∂–µ–Ω–∏—è**: –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∏

## üéØ –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê

### –ü–æ—Å–ª–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
- [ ] 1000+ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
- [ ] 10000+ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
- [ ] 10+ —Ä–∞–∑–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
- [ ] 5+ —Ä–∞–∑–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∑–∞–ø–∏—Å–∏
- [ ] –ö–∞—á–µ—Å—Ç–≤–æ 16kHz, –º–æ–Ω–æ, WAV
- [ ] –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 1-3 —Å–µ–∫—É–Ω–¥—ã

### –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:
- [ ] –í—Å–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
- [ ] –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
- [ ] –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ train/validation/test
- [ ] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å—è—Ö
- [ ] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞

## üìû –ü–û–î–î–ï–†–ñ–ö–ê

–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
4. –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º

---
**–ü–û–ú–ù–ò–¢–ï: –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö = –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏!**
"""
    
    try:
        instructions_path = "/home/microWakeWord_data/real_data_collection_instructions.md"
        with open(instructions_path, "w", encoding="utf-8") as f:
            f.write(instructions)
        
        logger.info(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {instructions_path}")
        return instructions_path
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {e}")
        return None

def create_data_collection_script():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    script_content = '''#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import librosa
import numpy as np
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def process_audio_files(input_dir, output_dir, target_duration=1.5):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç, –æ–±—Ä–µ–∑–∞–µ—Ç, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç"""
    logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ {input_dir} –≤ {output_dir}")
    
    os.makedirs(output_dir, exist_ok=True)
    
    processed_count = 0
    error_count = 0
    
    for file_path in Path(input_dir).glob("*.wav"):
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
            audio, sr = librosa.load(str(file_path), sr=16000)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
            audio = librosa.util.normalize(audio)
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–æ —Ü–µ–ª–µ–≤–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            target_samples = int(target_duration * sr)
            if len(audio) > target_samples:
                # –ë–µ—Ä–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É
                start = (len(audio) - target_samples) // 2
                audio = audio[start:start + target_samples]
            elif len(audio) < target_samples:
                # –î–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏
                padding = target_samples - len(audio)
                audio = np.pad(audio, (0, padding), mode='constant')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            output_file = os.path.join(output_dir, file_path.name)
            librosa.output.write_wav(output_file, audio, sr)
            
            processed_count += 1
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {e}")
            error_count += 1
    
    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}, –û—à–∏–±–æ–∫: {error_count}")
    return processed_count, error_count

def split_dataset(data_dir, train_ratio=0.7, val_ratio=0.15, test_ratio=0.15):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç –Ω–∞ train/validation/test"""
    logger.info("üìä –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ –Ω–∞ train/validation/test")
    
    import random
    random.seed(42)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    splits = ["train", "validation", "test"]
    for split in splits:
        os.makedirs(os.path.join(data_dir, split), exist_ok=True)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    pos_dir = os.path.join(data_dir, "positives_processed")
    if os.path.exists(pos_dir):
        pos_files = list(Path(pos_dir).glob("*.wav"))
        random.shuffle(pos_files)
        
        n_train = int(len(pos_files) * train_ratio)
        n_val = int(len(pos_files) * val_ratio)
        
        train_files = pos_files[:n_train]
        val_files = pos_files[n_train:n_train + n_val]
        test_files = pos_files[n_train + n_val:]
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        for files, split in [(train_files, "train"), (val_files, "validation"), (test_files, "test")]:
            split_dir = os.path.join(data_dir, split, "positives")
            os.makedirs(split_dir, exist_ok=True)
            for file_path in files:
                import shutil
                shutil.copy2(file_path, os.path.join(split_dir, file_path.name))
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    neg_dir = os.path.join(data_dir, "negatives_processed")
    if os.path.exists(neg_dir):
        neg_files = list(Path(neg_dir).glob("*.wav"))
        random.shuffle(neg_files)
        
        n_train = int(len(neg_files) * train_ratio)
        n_val = int(len(neg_files) * val_ratio)
        
        train_files = neg_files[:n_train]
        val_files = neg_files[n_train:n_train + n_val]
        test_files = neg_files[n_train + n_val:]
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        for files, split in [(train_files, "train"), (val_files, "validation"), (test_files, "test")]:
            split_dir = os.path.join(data_dir, split, "negatives")
            os.makedirs(split_dir, exist_ok=True)
            for file_path in files:
                import shutil
                shutil.copy2(file_path, os.path.join(split_dir, file_path.name))
    
    logger.info("‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ train/validation/test")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üéØ –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
    
    real_data_dir = "/home/microWakeWord_data/real_wake_word_data"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    pos_raw = os.path.join(real_data_dir, "positives_raw")
    pos_processed = os.path.join(real_data_dir, "positives_processed")
    if os.path.exists(pos_raw):
        process_audio_files(pos_raw, pos_processed)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    neg_raw = os.path.join(real_data_dir, "noise_raw")
    neg_processed = os.path.join(real_data_dir, "negatives_processed")
    if os.path.exists(neg_raw):
        process_audio_files(neg_raw, neg_processed)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ train/validation/test
    split_dataset(real_data_dir)
    
    logger.info("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
'''
    
    try:
        script_path = "/home/microWakeWord/process_real_data.py"
        with open(script_path, "w", encoding="utf-8") as f:
            f.write(script_content)
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        os.chmod(script_path, 0o755)
        
        logger.info(f"‚úÖ –°–∫—Ä–∏–ø—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω: {script_path}")
        return script_path
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üéØ –ü–û–î–ì–û–¢–û–í–ö–ê –ö –°–ë–û–†–£ –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
    
    # –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    real_data_dir = create_real_data_structure()
    if not real_data_dir:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    # –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    instructions_path = generate_real_wake_word_instructions()
    if not instructions_path:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        return False
    
    # –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    script_path = create_data_collection_script()
    if not script_path:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return False
    
    logger.info("üéâ –ü–û–î–ì–û–¢–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    logger.info(f"üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {real_data_dir}")
    logger.info(f"üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {instructions_path}")
    logger.info(f"üîß –°–∫—Ä–∏–ø—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {script_path}")
    
    logger.info("\\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    logger.info("1. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ real_data_collection_instructions.md")
    logger.info("2. –°–æ–±–µ—Ä–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ wake word")
    logger.info("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python process_real_data.py")
    logger.info("4. –ü–µ—Ä–µ–æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –Ω–∞ —Å–º–µ—à–∞–Ω–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ")
    
    return True

if __name__ == "__main__":
    success = main()
    if success:
        logger.info("‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        logger.error("‚ùå –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)