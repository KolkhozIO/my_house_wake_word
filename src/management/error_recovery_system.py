#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫ –¥–ª—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ microWakeWord
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
"""

import os
import sys
import time
import json
import shutil
import subprocess
import logging
import re
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import psutil

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/microWakeWord_data/error_recovery.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ErrorRecoverySystem:
    """–°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
    
    def __init__(self):
        self.data_dir = Path("/home/microWakeWord_data")
        self.tasks_dir = self.data_dir / "tasks"
        self.recovery_log = self.data_dir / "recovery_history.json"
        
        # –ò—Å—Ç–æ—Ä–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
        self.recovery_history = self._load_recovery_history()
        
        # –¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è
        self.error_patterns = {
            'no_space_left': {
                'pattern': 'no space left on device',
                'severity': 'critical',
                'solution': 'cleanup_disk_space'
            },
            'memory_error': {
                'pattern': 'memoryerror|outofmemoryerror|unable to allocate',
                'severity': 'high',
                'solution': 'reduce_memory_usage'
            },
            'file_not_found': {
                'pattern': 'filenotfounderror|no such file or directory|file not found',
                'severity': 'medium',
                'solution': 'recreate_missing_files'
            },
            'permission_denied': {
                'pattern': 'permissionerror|permission denied|access denied',
                'severity': 'medium',
                'solution': 'fix_permissions'
            },
            'import_error': {
                'pattern': 'importerror|modulenotfounderror|no module named',
                'severity': 'high',
                'solution': 'fix_imports'
            },
            'timeout_error': {
                'pattern': 'timeouterror|timeout|timed out',
                'severity': 'medium',
                'solution': 'increase_timeout'
            },
            'corrupted_data': {
                'pattern': 'corrupted|invalid|malformed|bad data',
                'severity': 'high',
                'solution': 'regenerate_data'
            }
        }
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ErrorRecoverySystem")
    
    def analyze_error(self, error_text: str, stage: str) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è"""
        error_text_lower = error_text.lower()
        
        for error_type, config in self.error_patterns.items():
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
            pattern = config['pattern'].lower()
            if re.search(pattern, error_text_lower):
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Ç–∏–ø–∞ '{error_type}' –≤ —ç—Ç–∞–ø–µ '{stage}'")
                return {
                    'type': error_type,
                    'severity': config['severity'],
                    'solution': config['solution'],
                    'stage': stage,
                    'timestamp': datetime.now().isoformat(),
                    'error_text': error_text[:500]  # –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                }
        
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏ –≤ —ç—Ç–∞–ø–µ '{stage}': {error_text[:100]}...")
        return None
    
    def recover_from_error(self, error_info: Dict) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏"""
        solution = error_info['solution']
        stage = error_info['stage']
        
        logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è '{solution}' –¥–ª—è —ç—Ç–∞–ø–∞ '{stage}'")
        
        try:
            if solution == 'cleanup_disk_space':
                return self._cleanup_disk_space()
            elif solution == 'reduce_memory_usage':
                return self._reduce_memory_usage(stage)
            elif solution == 'recreate_missing_files':
                return self._recreate_missing_files(stage)
            elif solution == 'fix_permissions':
                return self._fix_permissions()
            elif solution == 'fix_imports':
                return self._fix_imports()
            elif solution == 'increase_timeout':
                return self._increase_timeout(stage)
            elif solution == 'regenerate_data':
                return self._regenerate_data(stage)
            else:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {solution}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è '{solution}': {e}")
            return False
        finally:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self._record_recovery_attempt(error_info)
    
    def _cleanup_disk_space(self) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
            disk_usage = shutil.disk_usage(self.data_dir)
            free_gb = disk_usage.free / (1024**3)
            
            logger.info(f"–°–≤–æ–±–æ–¥–Ω–æ –º–µ—Å—Ç–∞: {free_gb:.1f} GB")
            
            if free_gb < 1.0:  # –ú–µ–Ω—å—à–µ 1GB
                logger.warning("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ –º–µ—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É...")
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                self._cleanup_temp_files()
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
                self._cleanup_old_logs()
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–æ–¥–µ–ª–∏
                self._cleanup_old_models()
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
                self._cleanup_old_tasks()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                disk_usage = shutil.disk_usage(self.data_dir)
                new_free_gb = disk_usage.free / (1024**3)
                
                logger.info(f"–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å–≤–æ–±–æ–¥–Ω–æ: {new_free_gb:.1f} GB")
                return new_free_gb > 0.5  # –•–æ—Ç—è –±—ã 500MB
            else:
                logger.info("–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∏—Å–∫–∞: {e}")
            return False
    
    def _cleanup_temp_files(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        temp_patterns = [
            "**/*_temp",
            "**/*_tmp", 
            "**/*.tmp",
            "**/*.temp",
            "**/temp_*",
            "**/tmp_*"
        ]
        
        cleaned_count = 0
        for pattern in temp_patterns:
            for temp_path in self.data_dir.glob(pattern):
                if temp_path.is_dir():
                    shutil.rmtree(temp_path, ignore_errors=True)
                    cleaned_count += 1
                elif temp_path.is_file():
                    temp_path.unlink(missing_ok=True)
                    cleaned_count += 1
        
        logger.info(f"–û—á–∏—â–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {cleaned_count}")
    
    def _cleanup_old_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
        log_files = list(self.data_dir.glob("*.log"))
        cutoff_date = datetime.now() - timedelta(days=7)  # –°—Ç–∞—Ä—à–µ –Ω–µ–¥–µ–ª–∏
        
        cleaned_count = 0
        for log_file in log_files:
            if log_file.stat().st_mtime < cutoff_date.timestamp():
                log_file.unlink(missing_ok=True)
                cleaned_count += 1
        
        logger.info(f"–û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {cleaned_count}")
    
    def _cleanup_old_models(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        model_files = list(self.data_dir.glob("model_*.tflite"))
        model_files.extend(list(self.data_dir.glob("model_*.json")))
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–æ–¥–µ–ª–µ–π
        if len(model_files) > 5:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            model_files.sort(key=lambda f: f.stat().st_mtime, reverse=True)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
            for old_model in model_files[5:]:
                old_model.unlink(missing_ok=True)
                logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å: {old_model.name}")
    
    def _cleanup_old_tasks(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á"""
        if not self.tasks_dir.exists():
            return
        
        task_files = list(self.tasks_dir.glob("*.json"))
        cutoff_date = datetime.now() - timedelta(days=3)  # –°—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π
        
        cleaned_count = 0
        for task_file in task_files:
            if task_file.stat().st_mtime < cutoff_date.timestamp():
                # –£–¥–∞–ª—è–µ–º JSON –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π PID —Ñ–∞–π–ª
                task_file.unlink(missing_ok=True)
                pid_file = task_file.with_suffix('.pid')
                pid_file.unlink(missing_ok=True)
                cleaned_count += 1
        
        logger.info(f"–û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á: {cleaned_count}")
    
    def _reduce_memory_usage(self, stage: str) -> bool:
        """–°–Ω–∏–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        logger.info(f"üîß –°–Ω–∏–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –¥–ª—è —ç—Ç–∞–ø–∞ '{stage}'")
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏
            subprocess.run(['python', 'task_manager.py', 'stop-all'], 
                         capture_output=True, timeout=30)
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à Python
            import gc
            gc.collect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            memory = psutil.virtual_memory()
            logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory.percent}%")
            
            if memory.percent > 80:
                logger.warning("–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏, –∂–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è...")
                time.sleep(30)  # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–Ω–∏–∂–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
            return False
    
    def _recreate_missing_files(self, stage: str) -> bool:
        """–í–æ—Å—Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        logger.info(f"üìÅ –í–æ—Å—Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç—Ç–∞–ø–∞ '{stage}'")
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –Ω—É–∂–Ω—ã –¥–ª—è —ç—Ç–∞–ø–∞
            required_files = {
                'generate_data': [
                    '/home/microWakeWord_data/positives_both',
                    '/home/microWakeWord_data/negatives_both'
                ],
                'generate_spectrograms': [
                    '/home/microWakeWord_data/generated_features'
                ],
                'train_model': [
                    '/home/microWakeWord_data/model.tflite',
                    '/home/microWakeWord_data/model.json'
                ]
            }
            
            files_to_check = required_files.get(stage, [])
            
            for file_path in files_to_check:
                if not os.path.exists(file_path):
                    logger.info(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: {file_path}")
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if file_path.endswith('/'):
                        os.makedirs(file_path, exist_ok=True)
                        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {file_path}")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
            return False
    
    def _fix_permissions(self) -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        logger.info("üîê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...")
        
        try:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö
            os.chmod(self.data_dir, 0o755)
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ñ–∞–π–ª—ã
            for file_path in self.data_dir.rglob('*'):
                if file_path.is_file():
                    os.chmod(file_path, 0o644)
                elif file_path.is_dir():
                    os.chmod(file_path, 0o755)
            
            logger.info("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤: {e}")
            return False
    
    def _fix_imports(self) -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏"""
        logger.info("üì¶ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏...")
        
        try:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            venv_python = "/home/microWakeWord/.venv/bin/python"
            
            if not os.path.exists(venv_python):
                logger.error("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                return False
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã
            required_packages = ['psutil', 'numpy', 'soundfile', 'tqdm']
            
            for package in required_packages:
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞: {package}")
                result = subprocess.run([
                    venv_python, '-c', f'import {package}'
                ], capture_output=True)
                
                if result.returncode != 0:
                    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞: {package}")
                    subprocess.run([
                        venv_python, '-m', 'pip', 'install', package
                    ], capture_output=True)
            
            logger.info("–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")
            return False
    
    def _increase_timeout(self, stage: str) -> bool:
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è —ç—Ç–∞–ø–∞"""
        logger.info(f"‚è∞ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è —ç—Ç–∞–ø–∞ '{stage}'")
        
        # –î–ª—è —ç—Ç–∞–ø–æ–≤ –æ–±—É—á–µ–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        if stage in ['train_model', 'generate_spectrograms']:
            logger.info("–£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–æ–≥–æ —ç—Ç–∞–ø–∞")
            time.sleep(60)  # –ñ–¥–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –º–∏–Ω—É—Ç—É
        
        return True
    
    def _regenerate_data(self, stage: str) -> bool:
        """–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info(f"üîÑ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–∞–ø–∞ '{stage}'")
        
        try:
            if stage == 'generate_data':
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
                logger.info("–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
                result = subprocess.run([
                    'python', 'quick_generate.py'
                ], capture_output=True, timeout=300)
                
                return result.returncode == 0
            
            elif stage == 'generate_spectrograms':
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
                spectro_dir = self.data_dir / "generated_features"
                if spectro_dir.exists():
                    shutil.rmtree(spectro_dir)
                
                logger.info("–ó–∞–ø—É—Å–∫ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º...")
                result = subprocess.run([
                    'python', 'generate_spectrograms.py'
                ], capture_output=True, timeout=600)
                
                return result.returncode == 0
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def _load_recovery_history(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π"""
        if self.recovery_log.exists():
            try:
                with open(self.recovery_log, 'r') as f:
                    return json.load(f)
            except:
                return []
        return []
    
    def _record_recovery_attempt(self, error_info: Dict):
        """–ó–∞–ø–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        recovery_record = {
            'timestamp': datetime.now().isoformat(),
            'error_type': error_info['type'],
            'stage': error_info['stage'],
            'solution': error_info['solution'],
            'severity': error_info['severity']
        }
        
        self.recovery_history.append(recovery_record)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 –∑–∞–ø–∏—Å—è–º–∏
        if len(self.recovery_history) > 100:
            self.recovery_history = self.recovery_history[-100:]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        try:
            with open(self.recovery_log, 'w') as f:
                json.dump(self.recovery_history, f, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
    
    def get_recovery_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π"""
        if not self.recovery_history:
            return {'total_recoveries': 0}
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = {
            'total_recoveries': len(self.recovery_history),
            'by_type': {},
            'by_stage': {},
            'by_severity': {},
            'recent_recoveries': self.recovery_history[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
        }
        
        for record in self.recovery_history:
            # –ü–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
            error_type = record['error_type']
            stats['by_type'][error_type] = stats['by_type'].get(error_type, 0) + 1
            
            # –ü–æ —ç—Ç–∞–ø–∞–º
            stage = record['stage']
            stats['by_stage'][stage] = stats['by_stage'].get(stage, 0) + 1
            
            # –ü–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
            severity = record['severity']
            stats['by_severity'][severity] = stats['by_severity'].get(severity, 0) + 1
        
        return stats

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    if len(sys.argv) > 1 and sys.argv[1] == '--test':
        recovery_system = ErrorRecoverySystem()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
        test_errors = [
            ("No space left on device", "generate_data"),
            ("MemoryError: Unable to allocate array", "train_model"),
            ("FileNotFoundError: [Errno 2] No such file", "generate_spectrograms"),
            ("ImportError: No module named 'psutil'", "train_model")
        ]
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
        
        for error_text, stage in test_errors:
            print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: {error_text[:50]}...")
            error_info = recovery_system.analyze_error(error_text, stage)
            
            if error_info:
                print(f"  –¢–∏–ø: {error_info['type']}")
                print(f"  –†–µ—à–µ–Ω–∏–µ: {error_info['solution']}")
                print(f"  –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {error_info['severity']}")
            else:
                print("  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = recovery_system.get_recovery_stats()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π: {stats['total_recoveries']}")
        
    else:
        print("–°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫ –¥–ª—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞")
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python error_recovery_system.py --test")

if __name__ == "__main__":
    main()