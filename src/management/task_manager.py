#!/usr/bin/env python3
"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è microWakeWord –ø—Ä–æ–µ–∫—Ç–∞
–ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Å—Ç–∞—Ç—É—Å–∞
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
"""

import os
import sys
import time
import json
import signal
import subprocess
import threading
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional
import psutil

# –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ê–Ø –õ–ò–ù–ö–û–í–ö–ê –ü–£–¢–ï–ô –ò–ó XML –ë–ï–ó –•–ê–†–î–ö–û–î–ê
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
from src.utils.path_manager import paths
from src.utils.centralized_logger import get_logger, setup_logging
from src.utils.print_replacer import enable_print_replacement, log_print

class TaskManager:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = get_logger("task_manager")
        enable_print_replacement("task_manager")
        
        self.tasks_dir = Path(f"{paths.DATA_ROOT}/tasks")
        self.tasks_dir.mkdir(parents=True, exist_ok=True)
        self.active_tasks = {}
        
        # –°–¢–†–û–ì–û –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ó–ê–î–ê–ß –ò–ó XML
        # –ï–î–ò–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö –ò–°–¢–ò–ù–´ –î–õ–Ø –í–°–ï–• –ó–ê–î–ê–ß
        self.task_commands = {
            "generate_data": "python src/pipeline/data_generation/generate_both_phrases.py",
            "generate_spectrograms": "python src/pipeline/data_generation/generate_spectrograms.py",
            "augmentations": "python src/pipeline/augmentation/apply_augmentations.py",
            "balance_dataset": "python src/pipeline/balancing/balance_dataset.py",
            "train_model": "python src/pipeline/training/train_model_only.py",
            "train_larger": "python src/pipeline/training/train_model_expanded.py",
            "generate_hard_negatives": "python backups/generate_hard_negatives.py",
            "generate_enhanced_positives": "python backups/generate_enhanced_positives.py",
            "generate_background": "python backups/generate_background_data.py",
            "generate_negatives_tts": "python src/pipeline/data_generation/generate_negatives_tts.py",
            "fix_sample_rate_to_16000": "python backups/fix_sample_rate_to_16000.py",
            "generate_negatives_real": "python src/pipeline/data_generation/collect_real_data.py",
            "generate_background_data": "python src/pipeline/data_generation/process_real_data.py",
            "generate_negatives_spectrograms": "python src/pipeline/data_generation/generate_negatives_spectrograms.py",
            "train_mixed_conservative": "python src/pipeline/training/train_with_mixed_data_fixed.py --variant conservative",
            "train_mixed_moderate": "python src/pipeline/training/train_with_mixed_data_fixed.py --variant moderate",
            "train_mixed_aggressive": "python src/pipeline/training/train_with_mixed_data_fixed.py --variant aggressive",
            "train_mixed_extreme": "python src/pipeline/training/train_with_mixed_data_fixed.py --variant extreme",
            "train_mixed_all": "python src/pipeline/training/train_with_mixed_data_fixed.py --variant conservative",
            "train_mixed_fixed": "python src/pipeline/training/train_with_mixed_data_fixed.py --variant conservative",
            "train_esphome_model": "python train_esphome_model.py",
            "test_training_5000": "python test_training_5000_steps.py"
        }
        
        # –û–ü–ò–°–ê–ù–ò–Ø –ó–ê–î–ê–ß –î–õ–Ø –°–ü–†–ê–í–ö–ò
        self.task_descriptions = {
            "generate_data": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è TTS –¥–∞–Ω–Ω—ã—Ö",
            "generate_spectrograms": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º",
            "augmentations": "–ê—É–¥–∏–æ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏",
            "balance_dataset": "–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞",
            "train_model": "–û–±—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ (50KB)",
            "train_larger": "–û–±—É—á–µ–Ω–∏–µ –±–æ–ª—å—à–æ–π –º–æ–¥–µ–ª–∏ (141KB)",
            "generate_hard_negatives": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è hard negatives",
            "generate_enhanced_positives": "–£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "generate_background": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            "generate_negatives_tts": "TTS –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "fix_sample_rate_to_16000": "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è sample rate",
            "generate_negatives_real": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            "generate_background_data": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ambient –¥–∞–Ω–Ω—ã—Ö",
            "generate_negatives_spectrograms": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º –¥–ª—è TTS –Ω–µ–≥–∞—Ç–∏–≤–æ–≤",
            "train_mixed_conservative": "–û–±—É—á–µ–Ω–∏–µ —Å–º–µ—à–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π)",
            "train_mixed_moderate": "–û–±—É—á–µ–Ω–∏–µ —Å–º–µ—à–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (—É–º–µ—Ä–µ–Ω–Ω—ã–π)",
            "train_mixed_aggressive": "–û–±—É—á–µ–Ω–∏–µ —Å–º–µ—à–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π)",
            "train_mixed_extreme": "–û–±—É—á–µ–Ω–∏–µ —Å–º–µ—à–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π)",
            "train_mixed_all": "–û–±—É—á–µ–Ω–∏–µ —Å–º–µ—à–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (–≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)",
            "train_mixed_fixed": "–û–±—É—á–µ–Ω–∏–µ —Å–º–µ—à–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)",
            "train_esphome_model": "–û–±—É—á–µ–Ω–∏–µ ESPHome –º–æ–¥–µ–ª–∏",
            "test_training_5000": "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ 5000 —à–∞–≥–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
        }
    
    def get_task_command(self, task_name: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–¥–∞—á–∏ –ø–æ –∏–º–µ–Ω–∏"""
        if task_name in self.task_commands:
            return self.task_commands[task_name]
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞: {task_name}")
    
    def is_valid_task(self, task_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞"""
        return task_name in self.task_commands
    
    def get_available_tasks(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á"""
        return list(self.task_commands.keys())
    
    def get_task_description(self, task_name: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        return self.task_descriptions.get(task_name, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    
    def list_tasks(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á"""
        self.logger.info("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ microWakeWord")
        self.logger.info("================================")
        self.logger.info("")
        
        self.logger.info("üü¢ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
        main_tasks = ["generate_data", "augmentations", "balance_dataset", "train_model", "train_larger"]
        for task in main_tasks:
            if task in self.task_commands:
                self.logger.info(f"  {task:<25} - {self.task_descriptions[task]}")
        
        self.logger.info("")
        self.logger.info("üü° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
        extra_tasks = ["generate_hard_negatives", "generate_enhanced_positives", "generate_background", 
                      "generate_negatives_tts", "fix_sample_rate_to_16000"]
        for task in extra_tasks:
            if task in self.task_commands:
                self.logger.info(f"  {task:<25} - {self.task_descriptions[task]}")
        
        self.logger.info("")
        self.logger.info("üîµ –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏:")
        new_tasks = ["generate_negatives_real", "generate_background_data", "train_esphome_model"]
        for task in new_tasks:
            if task in self.task_commands:
                self.logger.info(f"  {task:<25} - {self.task_descriptions[task]}")
        
        self.logger.info("")
        self.logger.info("üü† –°–º–µ—à–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        mixed_tasks = ["train_mixed_conservative", "train_mixed_moderate", "train_mixed_aggressive", 
                      "train_mixed_extreme", "train_mixed_all", "train_mixed_fixed"]
        for task in mixed_tasks:
            if task in self.task_commands:
                self.logger.info(f"  {task:<25} - {self.task_descriptions[task]}")
        
        self.logger.info("")
        self.logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ './manage_tasks.sh start <task>' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏")
        
    def start_task(self, task_name: str, command: str = None, working_dir: str = "/home/microWakeWord") -> bool:
        """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ–Ω–µ"""
        import time
        
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –ø–æ–ª—É—á–∞–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        if command is None:
            try:
                command = self.get_task_command(task_name)
            except ValueError as e:
                self.logger.error(f"‚ùå {e}")
                return False
        
        task_id = f"{task_name}_{int(time.time())}"
        task_file = self.tasks_dir / f"{task_id}.json"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–¥–∞—á–∞
        if self.is_task_running(task_name):
            self.logger.error(f"‚ùå –ó–∞–¥–∞—á–∞ '{task_name}' —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
            return False
            
        # –°–æ–∑–¥–∞–µ–º PID —Ñ–∞–π–ª
        pid_file = self.tasks_dir / f"{task_id}.pid"
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª —Å timestamp
        timestamp = int(time.time())
        log_file = f"/home/microWakeWord/logs/{task_name}_{timestamp}.log"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        try:
            with open(log_file, 'w') as log_f:
                process = subprocess.Popen(
                    command,
                    shell=True,
                    cwd=working_dir,
                    stdout=log_f,
                    stderr=subprocess.STDOUT,  # –û–±—ä–µ–¥–∏–Ω—è–µ–º stderr —Å stdout
                    preexec_fn=os.setsid  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                )
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã Python –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            time.sleep(3)
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–π Python –ø—Ä–æ—Ü–µ—Å—Å
            real_pid = None
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Å–∫—Ä–∏–ø—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
                # –ö–æ–º–∞–Ω–¥–∞: "python generate_spectrograms_expanded.py > generate_spectrograms_expanded.log 2>&1"
                parts = command.split()
                script_name = None
                for i, part in enumerate(parts):
                    if part == 'python' and i + 1 < len(parts):
                        script_name = parts[i + 1]
                        break
                
                if script_name and script_name.endswith('.py'):
                    script_name = script_name.split('/')[-1]
                
                for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                    if proc.info['name'] == 'python' and script_name in ' '.join(proc.info['cmdline']):
                        real_pid = proc.info['pid']
                        self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω Python –ø—Ä–æ—Ü–µ—Å—Å: PID {real_pid} –¥–ª—è {script_name}")
                        break
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Python –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π PID –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
            final_pid = real_pid if real_pid else process.pid
            self.logger.info(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º PID: {final_pid} (—Ä–µ–∞–ª—å–Ω—ã–π: {real_pid}, shell: {process.pid})")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
            task_info = {
                "task_id": task_id,
                "task_name": task_name,
                "command": command,
                "working_dir": working_dir,
                "pid": final_pid,
                "start_time": datetime.now().isoformat(),
                "status": "running",
                "log_file": log_file
            }
            
            with open(task_file, 'w') as f:
                json.dump(task_info, f, indent=2)
                
            with open(pid_file, 'w') as f:
                f.write(str(final_pid))
                
            self.active_tasks[task_id] = process
            self.logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_name}' –∑–∞–ø—É—â–µ–Ω–∞ (PID: {final_pid})")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ '{task_name}': {e}")
            return False
    
    def stop_task(self, task_name: str) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏"""
        task_files = list(self.tasks_dir.glob(f"{task_name}_*.json"))
        
        if not task_files:
            self.logger.error(f"‚ùå –ó–∞–¥–∞—á–∞ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
        for task_file in task_files:
            try:
                with open(task_file, 'r') as f:
                    task_info = json.load(f)
                
                pid = task_info.get('pid')
                if pid and psutil.pid_exists(pid):
                    # –£–±–∏–≤–∞–µ–º –≤—Å—é –≥—Ä—É–ø–ø—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                    os.killpg(os.getpgid(pid), signal.SIGTERM)
                    time.sleep(2)
                    
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ, —É–±–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                    if psutil.pid_exists(pid):
                        os.killpg(os.getpgid(pid), signal.SIGKILL)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                task_info['status'] = 'stopped'
                task_info['stop_time'] = datetime.now().isoformat()
                
                with open(task_file, 'w') as f:
                    json.dump(task_info, f, indent=2)
                
                self.logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_name}' –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                return True
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏ '{task_name}': {e}")
                return False
    
    def get_task_status(self, task_name: str = None) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á"""
        if task_name:
            task_files = list(self.tasks_dir.glob(f"{task_name}_*.json"))
        else:
            task_files = list(self.tasks_dir.glob("*.json"))
        
        tasks_status = {}
        
        for task_file in task_files:
            try:
                with open(task_file, 'r') as f:
                    task_info = json.load(f)
                
                task_id = task_info['task_id']
                pid = task_info.get('pid')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                if pid and psutil.pid_exists(pid):
                    try:
                        process = psutil.Process(pid)
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ –∏–º–µ–Ω–∏ —Å–∫—Ä–∏–ø—Ç–∞
                        script_name = None
                        try:
                            cmdline = process.cmdline()
                            if cmdline and len(cmdline) > 1:
                                script_name = cmdline[1]  # –í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç - –∏–º—è —Å–∫—Ä–∏–ø—Ç–∞
                        except:
                            pass
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
                        # –†–∞—Å—à–∏—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞
                        active_statuses = ['running', 'sleeping', 'disk-sleep', 'interruptible-sleep', 'uninterruptible-sleep']
                        process_status = process.status()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
                        # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è - –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç
                        if process_status in active_statuses or process_status in ['zombie', 'stopped']:
                            task_info['status'] = 'running'
                            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å cpu_percent - –¥–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                            cpu_percent = process.cpu_percent(interval=0.1)
                            task_info['cpu_percent'] = cpu_percent if cpu_percent > 0 else process.cpu_percent()
                            task_info['memory_mb'] = process.memory_info().rss / 1024 / 1024
                            task_info['memory_percent'] = (process.memory_info().rss / 1024 / 1024) / (psutil.virtual_memory().total / 1024 / 1024) * 100
                        else:
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
                            try:
                                return_code = process.returncode
                                if return_code is not None and return_code != 0:
                                    task_info['status'] = 'failed'
                                    task_info['exit_code'] = return_code
                                else:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                                    children = process.children(recursive=True)
                                    if children:
                                        task_info['status'] = 'running'
                                        cpu_percent = process.cpu_percent(interval=0.1)
                                        task_info['cpu_percent'] = cpu_percent if cpu_percent > 0 else process.cpu_percent()
                                        task_info['memory_mb'] = process.memory_info().rss / 1024 / 1024
                                        task_info['memory_percent'] = (process.memory_info().rss / 1024 / 1024) / (psutil.virtual_memory().total / 1024 / 1024) * 100
                                    else:
                                        task_info['status'] = 'finished'
                            except:
                                task_info['status'] = 'finished'
                    except (psutil.NoSuchProcess, psutil.AccessDenied):
                        task_info['status'] = 'finished'
                else:
                    # –ï—Å–ª–∏ PID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º
                    try:
                        # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ –∏–º–µ–Ω–∏ –∫–æ–º–∞–Ω–¥—ã
                        found_process = False
                        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                            try:
                                cmdline = proc.info['cmdline']
                                if cmdline and len(cmdline) > 1:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω—É–∂–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
                                    if any(script_name in ' '.join(cmdline) for script_name in ['microwakeword', 'model_train_eval', 'python']):
                                        if any(task_info['command'].split()[-1] in cmd for cmd in cmdline):
                                            task_info['status'] = 'running'
                                            task_info['pid'] = proc.info['pid']
                                            cpu_percent = proc.cpu_percent(interval=0.1)
                                            task_info['cpu_percent'] = cpu_percent if cpu_percent > 0 else proc.cpu_percent()
                                            task_info['memory_mb'] = proc.memory_info().rss / 1024 / 1024
                                            task_info['memory_percent'] = (proc.memory_info().rss / 1024 / 1024) / (psutil.virtual_memory().total / 1024 / 1024) * 100
                                            found_process = True
                                            break
                            except:
                                continue
                        
                        if not found_process:
                            task_info['status'] = 'finished'
                    except Exception:
                        task_info['status'] = 'finished'
                
                tasks_status[task_id] = task_info
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {task_file}: {e}")
        
        return tasks_status
    
    def is_task_running(self, task_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞"""
        status = self.get_task_status(task_name)
        return any(task['status'] == 'running' for task in status.values())
    
    def cleanup_finished_tasks(self):
        """–û—á–∏—â–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        task_files = list(self.tasks_dir.glob("*.json"))
        
        for task_file in task_files:
            try:
                with open(task_file, 'r') as f:
                    task_info = json.load(f)
                
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                if task_info.get('status') in ['finished', 'failed', 'stopped']:
                    task_file.unlink()
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π PID —Ñ–∞–π–ª
                    pid_file = self.tasks_dir / f"{task_info['task_id']}.pid"
                    if pid_file.exists():
                        pid_file.unlink()
                        
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {task_file}: {e}")
    
    def get_task_logs(self, task_name: str, lines: int = 50) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∑–∞–¥–∞—á–∏"""
        task_files = list(self.tasks_dir.glob(f"{task_name}_*.json"))
        
        if not task_files:
            return f"‚ùå –ó–∞–¥–∞—á–∞ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –∑–∞–¥–∞—á–∏
        task_file = max(task_files, key=os.path.getctime)
        
        try:
            with open(task_file, 'r') as f:
                task_info = json.load(f)
            
            pid = task_info.get('pid')
            if not pid or not psutil.pid_exists(pid):
                return f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–¥–∞—á–∏ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å –∫ –ª–æ–≥ —Ñ–∞–π–ª—É
            log_file = task_info.get('log_file')
            if log_file and os.path.exists(log_file):
                try:
                    with open(log_file, 'r') as f:
                        log_lines = f.readlines()
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫
                    return ''.join(log_lines[-lines:])
                except Exception as e:
                    return f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥ —Ñ–∞–π–ª–∞: {e}"
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –ª–æ–≥ —Ñ–∞–π–ª–∞, –∏—â–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            logs_dir = Path("/home/microWakeWord/logs")
            log_files = list(logs_dir.glob(f"{task_name}_*.log"))
            if log_files:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Ñ–∞–π–ª
                log_file = max(log_files, key=os.path.getctime)
                try:
                    with open(log_file, 'r') as f:
                        log_lines = f.readlines()
                    return ''.join(log_lines[-lines:])
                except Exception as e:
                    return f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥ —Ñ–∞–π–ª–∞: {e}"
            
            return f"‚ùå –õ–æ–≥ —Ñ–∞–π–ª –¥–ª—è –∑–∞–¥–∞—á–∏ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}"
    
    def cleanup_finished_tasks(self):
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        task_files = list(self.tasks_dir.glob("*.json"))
        
        for task_file in task_files:
            try:
                with open(task_file, 'r') as f:
                    task_info = json.load(f)
                
                pid = task_info.get('pid')
                if not pid or not psutil.pid_exists(pid):
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                    pid_file = self.tasks_dir / f"{task_info['task_id']}.pid"
                    if pid_file.exists():
                        pid_file.unlink()
                    task_file.unlink()
                    
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {task_file}: {e}")

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    logger = get_logger("main")
    
    manager = TaskManager()
    
    if len(sys.argv) < 2:
        logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python task_manager.py <–∫–æ–º–∞–Ω–¥–∞> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]")
        logger.info("–ö–æ–º–∞–Ω–¥—ã:")
        logger.info("  start <–∏–º—è> <–∫–æ–º–∞–Ω–¥–∞> [—Ä–∞–±–æ—á–∞—è_–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è] - –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏")
        logger.info("  stop <–∏–º—è> - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏")
        logger.info("  status [–∏–º—è] - —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á")
        logger.info("  logs <–∏–º—è> [—Å—Ç—Ä–æ–∫] - –ª–æ–≥–∏ –∑–∞–¥–∞—á–∏")
        logger.info("  list - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á")
        logger.info("  validate <–∏–º—è> - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
        logger.info("  cleanup - –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        return
    
    command = sys.argv[1].lower()
    
    if command == "start":
        if len(sys.argv) < 3:
            logger.error("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: start <–∏–º—è> [–∫–æ–º–∞–Ω–¥–∞] [—Ä–∞–±–æ—á–∞—è_–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è]")
            return
        
        task_name = sys.argv[2]
        cmd = sys.argv[3] if len(sys.argv) > 3 else None
        working_dir = sys.argv[4] if len(sys.argv) > 4 else "/home/microWakeWord"
        
        manager.start_task(task_name, cmd, working_dir)
        
    elif command == "stop":
        if len(sys.argv) < 3:
            logger.error("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: stop <–∏–º—è>")
            return
        
        task_name = sys.argv[2]
        manager.stop_task(task_name)
        
    elif command == "status":
        task_name = sys.argv[2] if len(sys.argv) > 2 else None
        status = manager.get_task_status(task_name)
        
        if not status:
            logger.info("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
            return
        
        logger.info("üìã –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á:")
        for task_id, task_info in status.items():
            if task_info['status'] == 'running':
                status_icon = "üü¢"
            elif task_info['status'] == 'failed':
                status_icon = "üî¥"
            else:
                status_icon = "üî¥"
            
            logger.info(f"{status_icon} {task_info['task_name']} ({task_id})")
            logger.info(f"   –ö–æ–º–∞–Ω–¥–∞: {task_info['command']}")
            logger.info(f"   PID: {task_info.get('pid', 'N/A')}")
            logger.info(f"   –°—Ç–∞—Ç—É—Å: {task_info['status']}")
            if task_info.get('exit_code'):
                logger.info(f"   –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {task_info['exit_code']}")
            logger.info(f"   –ó–∞–ø—É—Å–∫: {task_info['start_time']}")
            
            if task_info['status'] == 'running':
                logger.info(f"   CPU: {task_info.get('cpu_percent', 0):.1f}%")
                logger.info(f"   RAM: {task_info.get('memory_mb', 0):.1f} MB ({task_info.get('memory_percent', 0):.1f}%)")
            logger.info("")
            
    elif command == "logs":
        if len(sys.argv) < 3:
            logger.error("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: logs <–∏–º—è> [—Å—Ç—Ä–æ–∫]")
            return
        
        task_name = sys.argv[2]
        lines = int(sys.argv[3]) if len(sys.argv) > 3 else 50
        
        logs = manager.get_task_logs(task_name, lines)
        logger.info(logs)
        
    elif command == "cleanup":
        manager.cleanup_finished_tasks()
        logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—â–µ–Ω—ã")
        
    elif command == "stop-all":
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        status = manager.get_task_status()
        stopped_count = 0
        for task_id, task_info in status.items():
            if task_info['status'] == 'running':
                manager.stop_task(task_info['task_name'])
                stopped_count += 1
        logger.info(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {stopped_count} –∑–∞–¥–∞—á")
        
    elif command == "list":
        manager.list_tasks()
        
    elif command == "validate":
        if len(sys.argv) < 3:
            logger.error("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: validate <–∏–º—è>")
            return
        
        task_name = sys.argv[2]
        if manager.is_valid_task(task_name):
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_name}' –Ω–∞–π–¥–µ–Ω–∞")
            logger.info(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {manager.get_task_description(task_name)}")
            logger.info(f"   –ö–æ–º–∞–Ω–¥–∞: {manager.get_task_command(task_name)}")
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞: {task_name}")
            logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'list' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á")
        
    else:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

if __name__ == "__main__":
    main()