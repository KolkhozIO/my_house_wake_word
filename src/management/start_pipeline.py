#!/usr/bin/env python3
"""
–ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ microWakeWord
–ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
"""

import subprocess
import sys
from pathlib import Path

def run_command(cmd):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ–Ω–µ"""
    try:
        subprocess.Popen(cmd, shell=True)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ microWakeWord (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π)")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ task_manager.py –¥–æ—Å—Ç—É–ø–µ–Ω
    task_manager_path = Path("src/management/task_manager.py")
    if not task_manager_path.exists():
        print("‚ùå task_manager.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    print("üìù –≠—Ç–∞–ø 1: –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS –¥–∞–Ω–Ω—ã—Ö...")
    success = run_command(
        "source .venv/bin/activate && python src/management/task_manager.py start generate_data 'source .venv/bin/activate && python src/pipeline/data_generation/generate_both_phrases.py'"
    )
    if success:
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –≠—Ç–∞–ø 2: –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ (–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
    print("üé® –≠—Ç–∞–ø 2: –ó–∞–ø—É—Å–∫ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π...")
    success = run_command(
        "source .venv/bin/activate && python src/management/task_manager.py start augmentations 'source .venv/bin/activate && python src/pipeline/augmentation/apply_augmentations.py'"
    )
    if success:
        print("‚úÖ –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–µ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π")
    
    # –≠—Ç–∞–ø 3: –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
    print("‚öñÔ∏è –≠—Ç–∞–ø 3: –ó–∞–ø—É—Å–∫ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    success = run_command(
        "source .venv/bin/activate && python src/management/task_manager.py start balance_dataset 'source .venv/bin/activate && python src/pipeline/balancing/balance_dataset.py'"
    )
    if success:
        print("‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏")
    
    # –≠—Ç–∞–ø 4: –û–±—É—á–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π
    print("üß† –≠—Ç–∞–ø 4: –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏...")
    success = run_command(
        "source .venv/bin/activate && python src/management/task_manager.py start train_model 'source .venv/bin/activate && python src/pipeline/training/use_original_library_correctly_fixed.py'"
    )
    if success:
        print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–µ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è")
    
    
    print("\nüéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–µ!")
    print("üìã –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   ./manage_tasks.sh status")
    print("   ./manage_tasks.sh logs <–∏–º—è_–∑–∞–¥–∞—á–∏>")
    print("   ./manage_tasks.sh stop <–∏–º—è_–∑–∞–¥–∞—á–∏>")
    print("\nüí° –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ!")

if __name__ == "__main__":
    main()