#!/usr/bin/env python3
"""
–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω microWakeWord - –≤—Å–µ —ç—Ç–∞–ø—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ –∫—Ä—É–≥—É
–ö–∞–∂–¥—ã–π —ç—Ç–∞–ø —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–≤–æ–µ–º –ø–æ—Ç–æ–∫–µ —Å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º —Ü–∏–∫–ª–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
"""

import os
import sys
import time
import json
import signal
import subprocess
import threading
import multiprocessing as mp
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import psutil
import logging
import queue
from concurrent.futures import ThreadPoolExecutor, as_completed
from .error_recovery_system import ErrorRecoverySystem

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/microWakeWord_data/parallel_pipeline.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class StageWorker:
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    def __init__(self, stage_name: str, config: Dict, shared_state: Dict, error_recovery: ErrorRecoverySystem):
        self.stage_name = stage_name
        self.config = config
        self.shared_state = shared_state
        self.error_recovery = error_recovery
        self.running = False
        self.thread = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ç–∞–ø–∞
        self.stats = {
            'cycles_completed': 0,
            'success_count': 0,
            'error_count': 0,
            'last_success': None,
            'last_error': None,
            'avg_duration': 0,
            'current_status': 'stopped'
        }
        
        # –û—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥ –¥–ª—è —ç—Ç–∞–ø–∞
        self.command_queue = queue.Queue()
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è —ç—Ç–∞–ø–∞: {stage_name}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞"""
        if self.running:
            logger.warning(f"–í–æ—Ä–∫–µ—Ä {self.stage_name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.running = True
        self.stats['current_status'] = 'starting'
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
        self.thread = threading.Thread(target=self._worker_loop, daemon=True)
        self.thread.start()
        
        logger.info(f"üöÄ –í–æ—Ä–∫–µ—Ä {self.stage_name} –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
        if not self.running:
            return
        
        logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ {self.stage_name}")
        self.running = False
        self.stats['current_status'] = 'stopping'
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
        if self.thread and self.thread.is_alive():
            self.thread.join(timeout=5)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç –¥–æ 5 —Å–µ–∫—É–Ω–¥
            
            # –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
            if self.thread.is_alive():
                logger.warning(f"‚ö†Ô∏è –í–æ—Ä–∫–µ—Ä {self.stage_name} –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –∑–∞ 5 —Å–µ–∫—É–Ω–¥, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
        
        self.stats['current_status'] = 'stopped'
        logger.info(f"‚úÖ –í–æ—Ä–∫–µ—Ä {self.stage_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _worker_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞"""
        logger.info(f"üîÑ –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –≤–æ—Ä–∫–µ—Ä–∞ {self.stage_name}")
        
        cycle_count = 0
        
        while self.running:
            try:
                cycle_count += 1
                logger.info(f"üîÑ {self.stage_name} - –¶–∏–∫–ª #{cycle_count}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–∞–ø
                if not self._can_execute_stage():
                    logger.info(f"‚è≥ {self.stage_name} - –û–∂–∏–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    check_interval = self.config['check_interval']
                    for _ in range(check_interval):
                        if not self.running:
                            break
                        time.sleep(1)
                    continue
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —ç—Ç–∞–ø
                start_time = time.time()
                success = self._execute_stage()
                duration = time.time() - start_time
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.stats['cycles_completed'] += 1
                self.stats['avg_duration'] = (
                    (self.stats['avg_duration'] * (self.stats['cycles_completed'] - 1) + duration) 
                    / self.stats['cycles_completed']
                )
                
                if success:
                    self.stats['success_count'] += 1
                    self.stats['last_success'] = datetime.now()
                    self.stats['error_count'] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                    logger.info(f"‚úÖ {self.stage_name} - –¶–∏–∫–ª #{cycle_count} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ ({duration:.1f}—Å)")
                else:
                    self.stats['error_count'] += 1
                    self.stats['last_error'] = datetime.now()
                    logger.error(f"‚ùå {self.stage_name} - –¶–∏–∫–ª #{cycle_count} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                    self._attempt_recovery()
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                sleep_time = self.config['cycle_interval']
                logger.info(f"‚è≥ {self.stage_name} - –û–∂–∏–¥–∞–Ω–∏–µ {sleep_time}—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                for _ in range(sleep_time):
                    if not self.running:
                        break
                    time.sleep(1)
                
            except Exception as e:
                logger.error(f"‚ùå {self.stage_name} - –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –≤–æ—Ä–∫–µ—Ä–∞: {e}")
                self.stats['error_count'] += 1
                self.stats['last_error'] = datetime.now()
                time.sleep(30)  # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
    
    def _can_execute_stage(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–∞–ø"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = self.config.get('dependencies', [])
        for dep in dependencies:
            if not self._check_dependency(dep):
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        if not self._check_resources():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —ç—Ç–∞–ø
        if self._is_stage_running():
            return False
        
        return True
    
    def _check_dependency(self, dependency: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å"""
        if dependency == 'fresh_data':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            return self._has_fresh_data()
        elif dependency == 'spectrograms_ready':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤—ã –ª–∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã
            return self._has_spectrograms()
        elif dependency == 'model_ready':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–∞ –ª–∏ –º–æ–¥–µ–ª—å
            return self._has_model()
        
        return True
    
    def _check_resources(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"""
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞
        max_cpu = self.config.get('max_cpu_percent', 90)
        max_memory = self.config.get('max_memory_percent', 85)
        
        if cpu_percent > max_cpu:
            logger.warning(f"{self.stage_name} - –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent}%")
            return False
        
        if memory.percent > max_memory:
            logger.warning(f"{self.stage_name} - –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏: {memory.percent}%")
            return False
        
        return True
    
    def _is_stage_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—É—â–µ–Ω –ª–∏ —ç—Ç–∞–ø"""
        try:
            result = subprocess.run([
                'python', 'task_manager.py', 'status', self.stage_name
            ], capture_output=True, text=True, timeout=10)
            
            return 'running' in result.stdout.lower()
        except:
            return False
    
    def _execute_stage(self) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–∞–ø"""
        logger.info(f"üéØ {self.stage_name} - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–∞")
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
            command = self._build_command()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ task_manager
            result = subprocess.run([
                'python', 'task_manager.py', 'start', self.stage_name, command
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode != 0:
                logger.error(f"{self.stage_name} - –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.stderr}")
                return False
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            success = self._wait_for_completion()
            
            if success:
                logger.info(f"‚úÖ {self.stage_name} - –≠—Ç–∞–ø –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error(f"‚ùå {self.stage_name} - –≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            
            return success
            
        except Exception as e:
            logger.error(f"{self.stage_name} - –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–∞: {e}")
            return False
    
    def _build_command(self) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è —ç—Ç–∞–ø–∞"""
        base_commands = {
            'generate_data': 'python quick_generate.py',
            'generate_spectrograms': 'python generate_spectrograms.py',
            'augmentations': 'python apply_augmentations.py',
            'balance_dataset': 'python balance_dataset.py',
            'train_model': 'python use_original_library_correctly.py'
        }
        
        base_cmd = base_commands.get(self.stage_name, f'python {self.stage_name}.py')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        cpu_cores = self.config.get('cpu_cores', 2)
        env_vars = [
            f'OMP_NUM_THREADS={cpu_cores}',
            f'MKL_NUM_THREADS={cpu_cores}',
            f'OPENBLAS_NUM_THREADS={cpu_cores}'
        ]
        
        cmd = f'source .venv/bin/activate && {" ".join(env_vars)} {base_cmd}'
        
        return cmd
    
    def _wait_for_completion(self) -> bool:
        """–ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–∞–ø–∞"""
        timeout = self.config.get('timeout_minutes', 30) * 60  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        check_interval = 10  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        
        start_time = time.time()
        
        while (time.time() - start_time) < timeout:
            if not self._is_stage_running():
                # –≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
                return self._check_stage_success()
            
            time.sleep(check_interval)
        
        # –¢–∞–π–º–∞—É—Ç
        logger.warning(f"{self.stage_name} - –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ({timeout}—Å)")
        return False
    
    def _check_stage_success(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–∞"""
        success_indicators = {
            'generate_data': [
                '/home/microWakeWord_data/positives_both',
                '/home/microWakeWord_data/negatives_both'
            ],
            'generate_spectrograms': [
                '/home/microWakeWord_data/generated_features'
            ],
            'augmentations': [
                '/home/microWakeWord_data/generated_augmented_features'
            ],
            'balance_dataset': [
                '/home/microWakeWord_data/balanced_dataset'
            ],
            'train_model': [
                '/home/microWakeWord_data/model.tflite'
            ]
        }
        
        indicators = success_indicators.get(self.stage_name, [])
        for indicator in indicators:
            if not os.path.exists(indicator):
                return False
        
        return True
    
    def _attempt_recovery(self):
        """–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏"""
        logger.info(f"üîß {self.stage_name} - –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–∏
            error_text = self._get_last_task_error()
            
            if error_text:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                error_info = self.error_recovery.analyze_error(error_text, self.stage_name)
                
                if error_info:
                    logger.info(f"{self.stage_name} - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Ç–∏–ø–∞ '{error_info['type']}', –ø—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ '{error_info['solution']}'")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                    recovery_success = self.error_recovery.recover_from_error(error_info)
                    
                    if recovery_success:
                        logger.info(f"‚úÖ {self.stage_name} - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                        self.stats['error_count'] = 0
                    else:
                        logger.error(f"‚ùå {self.stage_name} - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
                else:
                    logger.warning(f"{self.stage_name} - –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏")
            
        except Exception as e:
            logger.error(f"{self.stage_name} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
    
    def _get_last_task_error(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏"""
        try:
            tasks_dir = Path("/home/microWakeWord_data/tasks")
            log_files = list(tasks_dir.glob(f"{self.stage_name}_*.log"))
            
            if not log_files:
                return None
            
            latest_log = max(log_files, key=lambda f: f.stat().st_mtime)
            
            with open(latest_log, 'r') as f:
                lines = f.readlines()
            
            error_lines = []
            for line in lines[-50:]:
                if any(keyword in line.lower() for keyword in ['error', 'exception', 'failed', 'traceback']):
                    error_lines.append(line.strip())
            
            return '\n'.join(error_lines) if error_lines else None
            
        except Exception as e:
            logger.error(f"{self.stage_name} - –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
            return None
    
    def _has_fresh_data(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        data_dirs = [
            '/home/microWakeWord_data/positives_both',
            '/home/microWakeWord_data/negatives_both'
        ]
        
        for data_dir in data_dirs:
            if os.path.exists(data_dir):
                files = list(Path(data_dir).glob('*.wav'))
                if files:
                    latest_file = max(files, key=lambda f: f.stat().st_mtime)
                    file_age = time.time() - latest_file.stat().st_mtime
                    if file_age < 3600:  # –ú–µ–Ω–µ–µ —á–∞—Å–∞
                        return True
        
        return False
    
    def _has_spectrograms(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã"""
        spectro_dir = Path('/home/microWakeWord_data/generated_features')
        return spectro_dir.exists() and any(spectro_dir.iterdir())
    
    def _has_model(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –º–æ–¥–µ–ª—å"""
        model_file = Path('/home/microWakeWord_data/model.tflite')
        return model_file.exists()
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Ä–∫–µ—Ä–∞"""
        return {
            'stage_name': self.stage_name,
            'current_status': self.stats['current_status'],
            'cycles_completed': self.stats['cycles_completed'],
            'success_count': self.stats['success_count'],
            'error_count': self.stats['error_count'],
            'last_success': self.stats['last_success'],
            'last_error': self.stats['last_error'],
            'avg_duration': self.stats['avg_duration']
        }

class ParallelPipelineManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    def __init__(self):
        self.running = False
        self.workers = {}
        self.error_recovery = ErrorRecoverySystem()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç—Ç–∞–ø–æ–≤
        self.stage_configs = {
            'generate_data': {
                'cpu_cores': 8,
                'memory_gb': 2,
                'cycle_interval': 300,  # 5 –º–∏–Ω—É—Ç
                'check_interval': 30,   # 30 —Å–µ–∫—É–Ω–¥
                'timeout_minutes': 10,
                'max_cpu_percent': 80,
                'max_memory_percent': 80,
                'dependencies': []
            },
            'generate_spectrograms': {
                'cpu_cores': 16,
                'memory_gb': 4,
                'cycle_interval': 600,  # 10 –º–∏–Ω—É—Ç
                'check_interval': 60,   # 1 –º–∏–Ω—É—Ç–∞
                'timeout_minutes': 30,
                'max_cpu_percent': 85,
                'max_memory_percent': 85,
                'dependencies': ['fresh_data']
            },
            'augmentations': {
                'cpu_cores': 4,
                'memory_gb': 1,
                'cycle_interval': 900,  # 15 –º–∏–Ω—É—Ç
                'check_interval': 60,   # 1 –º–∏–Ω—É—Ç–∞
                'timeout_minutes': 20,
                'max_cpu_percent': 70,
                'max_memory_percent': 70,
                'dependencies': ['spectrograms_ready']
            },
            'balance_dataset': {
                'cpu_cores': 4,
                'memory_gb': 1,
                'cycle_interval': 1200, # 20 –º–∏–Ω—É—Ç
                'check_interval': 60,   # 1 –º–∏–Ω—É—Ç–∞
                'timeout_minutes': 15,
                'max_cpu_percent': 70,
                'max_memory_percent': 70,
                'dependencies': ['spectrograms_ready']
            },
            'train_model': {
                'cpu_cores': 8,
                'memory_gb': 3,
                'cycle_interval': 1800, # 30 –º–∏–Ω—É—Ç
                'check_interval': 120,   # 2 –º–∏–Ω—É—Ç—ã
                'timeout_minutes': 60,
                'max_cpu_percent': 90,
                'max_memory_percent': 90,
                'dependencies': ['spectrograms_ready']
            }
        }
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ParallelPipelineManager")
    
    def start_parallel_pipeline(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ microWakeWord")
        self.running = True
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
            for stage_name, config in self.stage_configs.items():
                worker = StageWorker(stage_name, config, {}, self.error_recovery)
                worker.start()
                self.workers[stage_name] = worker
            
            logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(self.workers)} –≤–æ—Ä–∫–µ—Ä–æ–≤")
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self._monitor_workers()
            
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            self._cleanup()
    
    def _monitor_workers(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ—Ä–∫–µ—Ä–æ–≤"""
        logger.info("üìä –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤")
        
        while self.running:
            try:
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                self._log_workers_stats()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–æ–≤
                self._check_workers_health()
                
                # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç
                time.sleep(300)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(60)
    
    def _log_workers_stats(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤"""
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤:")
        
        for stage_name, worker in self.workers.items():
            stats = worker.get_stats()
            logger.info(f"  {stage_name}: —Å—Ç–∞—Ç—É—Å={stats['current_status']}, "
                       f"—Ü–∏–∫–ª–æ–≤={stats['cycles_completed']}, "
                       f"—É—Å–ø–µ—Ö–æ–≤={stats['success_count']}, "
                       f"–æ—à–∏–±–æ–∫={stats['error_count']}")
    
    def _check_workers_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤–æ—Ä–∫–µ—Ä–æ–≤"""
        for stage_name, worker in self.workers.items():
            if not worker.thread.is_alive():
                logger.error(f"‚ùå –í–æ—Ä–∫–µ—Ä {stage_name} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ!")
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä
                logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ {stage_name}")
                worker.start()
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω...")
        self.running = False
    
    def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
        for stage_name, worker in self.workers.items():
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ {stage_name}")
            worker.stop()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        try:
            subprocess.run(['python', 'task_manager.py', 'stop-all'], 
                         capture_output=True, timeout=30)
        except:
            pass
        
        logger.info("‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_overall_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total_cycles = sum(worker.stats['cycles_completed'] for worker in self.workers.values())
        total_successes = sum(worker.stats['success_count'] for worker in self.workers.values())
        total_errors = sum(worker.stats['error_count'] for worker in self.workers.values())
        
        return {
            'total_cycles': total_cycles,
            'total_successes': total_successes,
            'total_errors': total_errors,
            'workers_count': len(self.workers),
            'running_workers': sum(1 for worker in self.workers.values() if worker.running)
        }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1 and sys.argv[1] == '--help':
        print("""
–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω microWakeWord

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python parallel_pipeline_manager.py [--help]

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –í—Å–µ —ç—Ç–∞–ø—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ
    - –ö–∞–∂–¥—ã–π —ç—Ç–∞–ø —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–≤–æ–µ–º –ø–æ—Ç–æ–∫–µ
    - –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–µ —Ü–∏–∫–ª—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    - Graceful shutdown –ø–æ Ctrl+C

–≠—Ç–∞–ø—ã –ø–∞–π–ø–ª–∞–π–Ω–∞ (–≤—Å–µ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ):
    1. generate_data - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω)
    2. generate_spectrograms - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω)
    3. augmentations - –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω)
    4. balance_dataset - –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ (–∫–∞–∂–¥—ã–µ 20 –º–∏–Ω)
    5. train_model - –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω)

–õ–æ–≥–∏: /home/microWakeWord_data/parallel_pipeline.log
        """)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists('task_manager.py'):
        logger.error("task_manager.py –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ microWakeWord")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    pipeline_manager = ParallelPipelineManager()
    pipeline_manager.start_parallel_pipeline()

if __name__ == "__main__":
    main()