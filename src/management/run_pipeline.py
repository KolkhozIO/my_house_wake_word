#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ microWakeWord –∫–∞–∫ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –∑–∞–¥–∞—á
"""

import subprocess
import time
import sys
from pathlib import Path

def run_command(cmd):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ microWakeWord")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ task_manager.py –¥–æ—Å—Ç—É–ø–µ–Ω
    if not Path("task_manager.py").exists():
        print("‚ùå task_manager.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    print("üìù –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TTS –¥–∞–Ω–Ω—ã—Ö...")
    success, stdout, stderr = run_command(
        "source .venv/bin/activate && python task_manager.py start generate_data 'source .venv/bin/activate && python generate_both_phrases.py'"
    )
    
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {stderr}")
        return
    
    print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ")
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
    while True:
        success, stdout, stderr = run_command("source .venv/bin/activate && python task_manager.py status generate_data")
        if "üî¥" in stdout or "finished" in stdout:
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            break
        elif "‚ùå" in stdout:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            return
        time.sleep(10)
    
    # –≠—Ç–∞–ø 2: –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    print("üé® –≠—Ç–∞–ø 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π...")
    success, stdout, stderr = run_command(
        "source .venv/bin/activate && python task_manager.py start augmentations 'source .venv/bin/activate && python apply_augmentations.py'"
    )
    
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π: {stderr}")
        return
    
    print("‚úÖ –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–µ")
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π...")
    while True:
        success, stdout, stderr = run_command("source .venv/bin/activate && python task_manager.py status augmentations")
        if "üî¥" in stdout or "finished" in stdout:
            print("‚úÖ –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            break
        elif "‚ùå" in stdout:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è—Ö")
            return
        time.sleep(15)
    
    # –≠—Ç–∞–ø 3: –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
    print("‚öñÔ∏è –≠—Ç–∞–ø 3: –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    success, stdout, stderr = run_command(
        "source .venv/bin/activate && python task_manager.py start balance_dataset 'source .venv/bin/activate && python balance_dataset.py'"
    )
    
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {stderr}")
        return
    
    print("‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ")
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏...")
    while True:
        success, stdout, stderr = run_command("source .venv/bin/activate && python task_manager.py status balance_dataset")
        if "üî¥" in stdout or "finished" in stdout:
            print("‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            break
        elif "‚ùå" in stdout:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ")
            return
        time.sleep(20)
    
    # –≠—Ç–∞–ø 4: –û–±—É—á–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π
    print("üß† –≠—Ç–∞–ø 4: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    success, stdout, stderr = run_command(
        "source .venv/bin/activate && python task_manager.py start train_model 'source .venv/bin/activate && python use_original_library_correctly.py'"
    )
    
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {stderr}")
        return
    
    print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–µ")
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è...")
    while True:
        success, stdout, stderr = run_command("source .venv/bin/activate && python task_manager.py status train_model")
        if "üî¥" in stdout or "finished" in stdout:
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            break
        elif "‚ùå" in stdout:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—É—á–µ–Ω–∏–∏")
            return
        time.sleep(30)
    
    # –≠—Ç–∞–ø 5: –û–±—É—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ–π –º–æ–¥–µ–ª–∏
    print("üöÄ –≠—Ç–∞–ø 5: –û–±—É—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ–π –º–æ–¥–µ–ª–∏...")
    success, stdout, stderr = run_command(
        "source .venv/bin/activate && python task_manager.py start train_larger 'source .venv/bin/activate && python train_larger_model.py'"
    )
    
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–π –º–æ–¥–µ–ª–∏: {stderr}")
        return
    
    print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ–π –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–µ")
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–π –º–æ–¥–µ–ª–∏
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–π –º–æ–¥–µ–ª–∏...")
    while True:
        success, stdout, stderr = run_command("source .venv/bin/activate && python task_manager.py status train_larger")
        if "üî¥" in stdout or "finished" in stdout:
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ–π –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            break
        elif "‚ùå" in stdout:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—É—á–µ–Ω–∏–∏ –±–æ–ª—å—à–µ–π –º–æ–¥–µ–ª–∏")
            return
        time.sleep(30)
    
    print("\nüéâ –í–µ—Å—å –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("üìã –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   ./manage_tasks.sh status")
    print("   ./manage_tasks.sh logs <–∏–º—è_–∑–∞–¥–∞—á–∏>")
    print("   ./manage_tasks.sh stop <–∏–º—è_–∑–∞–¥–∞—á–∏>")

if __name__ == "__main__":
    main()