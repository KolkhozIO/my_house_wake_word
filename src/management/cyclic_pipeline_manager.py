#!/usr/bin/env python3
"""
–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–∞–π–ø–ª–∞–π–Ω microWakeWord —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
"""

import os
import sys
import time
import json
import signal
import subprocess
import threading
import multiprocessing as mp
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import psutil
import logging
from .error_recovery_system import ErrorRecoverySystem

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/microWakeWord_data/cyclic_pipeline.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ResourceManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    def __init__(self):
        self.total_cores = mp.cpu_count()
        self.total_memory_gb = psutil.virtual_memory().total / (1024**3)
        
        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
        self.stage_resources = {
            'generate_data': {
                'cpu_cores': min(8, self.total_cores // 4),  # 25% CPU
                'memory_gb': min(2, self.total_memory_gb // 4),  # 25% RAM
                'priority': 'high',
                'timeout_minutes': 10
            },
            'generate_spectrograms': {
                'cpu_cores': min(16, self.total_cores // 2),  # 50% CPU
                'memory_gb': min(4, self.total_memory_gb // 2),  # 50% RAM
                'priority': 'high',
                'timeout_minutes': 30
            },
            'augmentations': {
                'cpu_cores': min(4, self.total_cores // 8),  # 12.5% CPU
                'memory_gb': min(1, self.total_memory_gb // 8),  # 12.5% RAM
                'priority': 'medium',
                'timeout_minutes': 20
            },
            'balance_dataset': {
                'cpu_cores': min(4, self.total_cores // 8),  # 12.5% CPU
                'memory_gb': min(1, self.total_memory_gb // 8),  # 12.5% RAM
                'priority': 'medium',
                'timeout_minutes': 15
            },
            'train_model': {
                'cpu_cores': min(8, self.total_cores // 4),  # 25% CPU
                'memory_gb': min(3, self.total_memory_gb // 3),  # 33% RAM
                'priority': 'high',
                'timeout_minutes': 60
            }
        }
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ResourceManager: {self.total_cores} —è–¥–µ—Ä, {self.total_memory_gb:.1f}GB RAM")
        for stage, resources in self.stage_resources.items():
            logger.info(f"  {stage}: {resources['cpu_cores']} —è–¥–µ—Ä, {resources['memory_gb']}GB RAM")
    
    def get_resources(self, stage: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —ç—Ç–∞–ø–∞"""
        return self.stage_resources.get(stage, {
            'cpu_cores': 2,
            'memory_gb': 1,
            'priority': 'low',
            'timeout_minutes': 10
        })
    
    def check_system_resources(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞
        if cpu_percent > 90:
            logger.warning(f"–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent}%")
            return False
        
        if memory.percent > 85:
            logger.warning(f"–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏: {memory.percent}%")
            return False
        
        return True

class CyclicPipelineManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    def __init__(self):
        self.tasks_dir = Path("/home/microWakeWord_data/tasks")
        self.tasks_dir.mkdir(parents=True, exist_ok=True)
        
        self.resource_manager = ResourceManager()
        self.error_recovery = ErrorRecoverySystem()
        self.running = False
        self.stages = [
            'generate_data',
            'generate_spectrograms', 
            'augmentations',
            'balance_dataset',
            'train_model'
        ]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.stage_stats = {stage: {
            'success_count': 0,
            'error_count': 0,
            'last_success': None,
            'last_error': None,
            'avg_duration': 0
        } for stage in self.stages}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–∏–∫–ª–∞
        self.cycle_delay = 30  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
        self.max_concurrent_stages = 2  # –º–∞–∫—Å–∏–º—É–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
        self.error_threshold = 3  # –º–∞–∫—Å–∏–º—É–º –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ –¥–ª—è —ç—Ç–∞–ø–∞
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CyclicPipelineManager")
    
    def start_cyclic_pipeline(self):
        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ microWakeWord")
        self.running = True
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        cycle_count = 0
        
        try:
            while self.running:
                cycle_count += 1
                logger.info(f"üîÑ –¶–∏–∫–ª #{cycle_count} - {datetime.now().strftime('%H:%M:%S')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
                if not self.resource_manager.check_system_resources():
                    logger.warning("–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞, –∂–¥–µ–º 60 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(60)
                    continue
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —ç—Ç–∞–ø—ã –ø–∞–π–ø–ª–∞–π–Ω–∞
                self._execute_pipeline_cycle()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                self._log_cycle_stats()
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {self.cycle_delay} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
                time.sleep(self.cycle_delay)
                
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            self._cleanup()
    
    def _execute_pipeline_cycle(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        active_stages = []
        
        for stage in self.stages:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∞–ø
            if not self._can_start_stage(stage):
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
            if len(active_stages) >= self.max_concurrent_stages:
                logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ ({self.max_concurrent_stages})")
                break
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø
            if self._start_stage(stage):
                active_stages.append(stage)
                logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω —ç—Ç–∞–ø: {stage}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç—Ç–∞–ø–∞: {stage}")
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ç–∞–ø—ã
        if active_stages:
            self._monitor_active_stages(active_stages)
    
    def _can_start_stage(self, stage: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∞–ø"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ
        if self._is_stage_running(stage):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥
        stats = self.stage_stats[stage]
        if stats['error_count'] >= self.error_threshold:
            logger.warning(f"–≠—Ç–∞–ø {stage} –∏–º–µ–µ—Ç {stats['error_count']} –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        if stage == 'generate_spectrograms' and not self._has_recent_data():
            logger.info("–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º")
            return False
        
        return True
    
    def _start_stage(self, stage: str) -> bool:
        """–ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞"""
        resources = self.resource_manager.get_resources(stage)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Å —É—á–µ—Ç–æ–º —Ä–µ—Å—É—Ä—Å–æ–≤
        command = self._build_stage_command(stage, resources)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ task_manager
        try:
            result = subprocess.run([
                'python', 'task_manager.py', 'start', stage, command
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                logger.info(f"–≠—Ç–∞–ø {stage} –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç—Ç–∞–ø–∞ {stage}: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ —ç—Ç–∞–ø–∞ {stage}")
            return False
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç—Ç–∞–ø–∞ {stage}: {e}")
            return False
    
    def _build_stage_command(self, stage: str, resources: Dict) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è —ç—Ç–∞–ø–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ—Å—É—Ä—Å–æ–≤"""
        base_commands = {
            'generate_data': 'python quick_generate.py',
            'generate_spectrograms': 'python generate_spectrograms.py',
            'augmentations': 'python apply_augmentations.py',
            'balance_dataset': 'python balance_dataset.py',
            'train_model': 'python use_original_library_correctly.py'
        }
        
        base_cmd = base_commands.get(stage, f'python {stage}.py')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        env_vars = [
            f'OMP_NUM_THREADS={resources["cpu_cores"]}',
            f'MKL_NUM_THREADS={resources["cpu_cores"]}',
            f'OPENBLAS_NUM_THREADS={resources["cpu_cores"]}'
        ]
        
        cmd = f'source .venv/bin/activate && {" ".join(env_vars)} {base_cmd}'
        
        return cmd
    
    def _is_stage_running(self, stage: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—É—â–µ–Ω –ª–∏ —ç—Ç–∞–ø"""
        try:
            result = subprocess.run([
                'python', 'task_manager.py', 'status', stage
            ], capture_output=True, text=True, timeout=10)
            
            return 'running' in result.stdout.lower()
        except:
            return False
    
    def _has_recent_data(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        data_dirs = [
            '/home/microWakeWord_data/positives_both',
            '/home/microWakeWord_data/negatives_both'
        ]
        
        for data_dir in data_dirs:
            if os.path.exists(data_dir):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –ø—É—Å—Ç–∞—è –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è
                files = list(Path(data_dir).glob('*.wav'))
                if files:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    latest_file = max(files, key=lambda f: f.stat().st_mtime)
                    file_age = time.time() - latest_file.stat().st_mtime
                    
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã —Å–≤–µ–∂–∏–µ (–º–µ–Ω–µ–µ 1 —á–∞—Å–∞)
                    if file_age < 3600:
                        return True
        
        return False
    
    def _monitor_active_stages(self, active_stages: List[str]):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤"""
        logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤: {', '.join(active_stages)}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
        start_time = time.time()
        timeout = 300  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        
        while active_stages and (time.time() - start_time) < timeout:
            completed_stages = []
            
            for stage in active_stages:
                if not self._is_stage_running(stage):
                    completed_stages.append(stage)
                    self._handle_stage_completion(stage)
            
            # –£–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã
            for stage in completed_stages:
                active_stages.remove(stage)
            
            if active_stages:
                time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    
    def _handle_stage_completion(self, stage: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–∞–ø–∞"""
        logger.info(f"–≠—Ç–∞–ø {stage} –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.stage_stats[stage]
        stats['last_success'] = datetime.now()
        stats['success_count'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if self._check_stage_success(stage):
            logger.info(f"‚úÖ –≠—Ç–∞–ø {stage} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            stats['error_count'] = 0
        else:
            logger.error(f"‚ùå –≠—Ç–∞–ø {stage} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            stats['error_count'] += 1
            stats['last_error'] = datetime.now()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –æ—Ç –æ—à–∏–±–∫–∏
            self._attempt_error_recovery(stage)
    
    def _check_stage_success(self, stage: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤/—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        success_indicators = {
            'generate_data': ['/home/microWakeWord_data/positives_both', '/home/microWakeWord_data/negatives_both'],
            'generate_spectrograms': ['/home/microWakeWord_data/generated_features'],
            'augmentations': ['/home/microWakeWord_data/generated_augmented_features'],
            'balance_dataset': ['/home/microWakeWord_data/balanced_dataset'],
            'train_model': ['/home/microWakeWord_data/model.tflite']
        }
        
        indicators = success_indicators.get(stage, [])
        for indicator in indicators:
            if not os.path.exists(indicator):
                return False
        
        return True
    
    def _attempt_error_recovery(self, stage: str):
        """–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏"""
        logger.info(f"üîß –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–∞–ø–∞ {stage}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–∏
            error_text = self._get_last_task_error(stage)
            
            if error_text:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                error_info = self.error_recovery.analyze_error(error_text, stage)
                
                if error_info:
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Ç–∏–ø–∞ '{error_info['type']}', –ø—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ '{error_info['solution']}'")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                    recovery_success = self.error_recovery.recover_from_error(error_info)
                    
                    if recovery_success:
                        logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–∞–ø–∞ {stage} —É—Å–ø–µ—à–Ω–æ")
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                        self.stage_stats[stage]['error_count'] = 0
                    else:
                        logger.error(f"‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–∞–ø–∞ {stage} –Ω–µ —É–¥–∞–ª–æ—Å—å")
                else:
                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è —ç—Ç–∞–ø–∞ {stage}")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –¥–ª—è —ç—Ç–∞–ø–∞ {stage}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–∞–ø–∞ {stage}: {e}")
    
    def _get_last_task_error(self, stage: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏ –¥–ª—è —ç—Ç–∞–ø–∞"""
        try:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Ñ–∞–π–ª –¥–ª—è —ç—Ç–∞–ø–∞
            log_files = list(self.tasks_dir.glob(f"{stage}_*.log"))
            if not log_files:
                return None
            
            # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π
            latest_log = max(log_files, key=lambda f: f.stat().st_mtime)
            
            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
            with open(latest_log, 'r') as f:
                lines = f.readlines()
                
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏
            error_lines = []
            for line in lines[-50:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
                if any(keyword in line.lower() for keyword in ['error', 'exception', 'failed', 'traceback']):
                    error_lines.append(line.strip())
            
            return '\n'.join(error_lines) if error_lines else None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–∞ –¥–ª—è —ç—Ç–∞–ø–∞ {stage}: {e}")
            return None
    
    def _log_cycle_stats(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–∏–∫–ª–∞"""
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ç–∞–ø–æ–≤:")
        for stage, stats in self.stage_stats.items():
            logger.info(f"  {stage}: —É—Å–ø–µ—Ö–æ–≤={stats['success_count']}, –æ—à–∏–±–æ–∫={stats['error_count']}")
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω...")
        self.running = False
    
    def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        try:
            subprocess.run(['python', 'task_manager.py', 'stop-all'], 
                         capture_output=True, timeout=30)
        except:
            pass
        
        logger.info("‚úÖ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1 and sys.argv[1] == '--help':
        print("""
–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–∞–π–ø–ª–∞–π–Ω microWakeWord

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python cyclic_pipeline_manager.py [--help]

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –ø–∞–π–ø–ª–∞–π–Ω–∞
    - –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    - Graceful shutdown –ø–æ Ctrl+C

–≠—Ç–∞–ø—ã –ø–∞–π–ø–ª–∞–π–Ω–∞:
    1. generate_data - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (25% CPU, 25% RAM)
    2. generate_spectrograms - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º (50% CPU, 50% RAM)
    3. augmentations - –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ (12.5% CPU, 12.5% RAM)
    4. balance_dataset - –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ (12.5% CPU, 12.5% RAM)
    5. train_model - –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (25% CPU, 33% RAM)

–õ–æ–≥–∏: /home/microWakeWord_data/cyclic_pipeline.log
        """)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists('task_manager.py'):
        logger.error("task_manager.py –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ microWakeWord")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    pipeline_manager = CyclicPipelineManager()
    pipeline_manager.start_cyclic_pipeline()

if __name__ == "__main__":
    main()